/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: comm.message.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Comm_ReceiveTyping: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveTyping"}
  public var protoMessageName: String {return "ReceiveTyping"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "userId": 2,
    "userName": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "user_id": 2,
    "user_name": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveTyping = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveTyping>, Comm_Receive>(protoFieldNumber: 20, protoFieldName: "RECEIVE_TYPING", jsonFieldName: "rECEIVETYPING", swiftFieldName: "Comm_ReceiveTyping_receiveTyping", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var userId: Data = Data()

  public var userName: String = ""

  public init() {}

  public init(chatId: Data = Data(),
    userId: Data = Data(),
    userName: String = "")
  {
    self.chatId = chatId
    self.userId = userId
    self.userName = userName
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &userId)
    case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &userName)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: userId, protoFieldNumber: 2, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: userName, protoFieldNumber: 3, protoFieldName: "user_name", jsonFieldName: "userName", swiftFieldName: "userName")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveTyping) -> Bool {
    if chatId != other.chatId {return false}
    if userId != other.userId {return false}
    if userName != other.userName {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveRead: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveRead"}
  public var protoMessageName: String {return "ReceiveRead"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "userId": 2,
    "messageId": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "user_id": 2,
    "message_id": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveRead = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveRead>, Comm_Receive>(protoFieldNumber: 21, protoFieldName: "RECEIVE_READ", jsonFieldName: "rECEIVEREAD", swiftFieldName: "Comm_ReceiveRead_receiveRead", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var userId: Data = Data()

  public var messageId: Data = Data()

  public init() {}

  public init(chatId: Data = Data(),
    userId: Data = Data(),
    messageId: Data = Data())
  {
    self.chatId = chatId
    self.userId = userId
    self.messageId = messageId
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &userId)
    case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: userId, protoFieldNumber: 2, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 3, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveRead) -> Bool {
    if chatId != other.chatId {return false}
    if userId != other.userId {return false}
    if messageId != other.messageId {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveMessage"}
  public var protoMessageName: String {return "ReceiveMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "message": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "message": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_ReceiveMessage
    var unknown = ProtobufUnknownStorage()
    var _message: Comm_Message? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _message {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _message != other._message {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._message = _message
      return clone
    }
  }

  private var _storage = _StorageClass()

  struct Extensions {

    static let Comm_Receive_receiveMessage = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveMessage>, Comm_Receive>(protoFieldNumber: 22, protoFieldName: "RECEIVE_MESSAGE", jsonFieldName: "rECEIVEMESSAGE", swiftFieldName: "Comm_ReceiveMessage_receiveMessage", defaultValue: nil)
  }

  public var message: Comm_Message {
    get {return _storage._message ?? Comm_Message()}
    set {_uniqueStorage()._message = newValue}
  }

  public init() {}

  public init(message: Comm_Message? = nil)
  {
    let storage = _uniqueStorage()
    storage._message = message
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_ReceiveDelivered: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveDelivered"}
  public var protoMessageName: String {return "ReceiveDelivered"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "userId": 2,
    "messageId": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "user_id": 2,
    "message_id": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveDelivered = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveDelivered>, Comm_Receive>(protoFieldNumber: 23, protoFieldName: "RECEIVE_DELIVERED", jsonFieldName: "rECEIVEDELIVERED", swiftFieldName: "Comm_ReceiveDelivered_receiveDelivered", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var userId: Data = Data()

  public var messageId: Data = Data()

  public init() {}

  public init(chatId: Data = Data(),
    userId: Data = Data(),
    messageId: Data = Data())
  {
    self.chatId = chatId
    self.userId = userId
    self.messageId = messageId
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &userId)
    case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: userId, protoFieldNumber: 2, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 3, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveDelivered) -> Bool {
    if chatId != other.chatId {return false}
    if userId != other.userId {return false}
    if messageId != other.messageId {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveReadAll: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveReadAll"}
  public var protoMessageName: String {return "ReceiveReadAll"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "userId": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "user_id": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveReadAll = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveReadAll>, Comm_Receive>(protoFieldNumber: 24, protoFieldName: "RECEIVE_READ_ALL", jsonFieldName: "rECEIVEREADALL", swiftFieldName: "Comm_ReceiveReadAll_receiveReadAll", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var userId: Data = Data()

  public init() {}

  public init(chatId: Data = Data(),
    userId: Data = Data())
  {
    self.chatId = chatId
    self.userId = userId
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &userId)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: userId, protoFieldNumber: 2, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveReadAll) -> Bool {
    if chatId != other.chatId {return false}
    if userId != other.userId {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListMessage"}
  public var protoMessageName: String {return "ListMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListMessage.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data? = nil

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data? = nil)
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      if let v = messageId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListMessage.Request) -> Bool {
      if chatId != other.chatId {return false}
      if ((messageId != nil || other.messageId != nil) && (messageId == nil || other.messageId == nil || messageId! != other.messageId!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListMessage.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "messages": 1,
      "tooLong": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "messages": 1,
      "too_long": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var messages: [Comm_Message] = []

    public var tooLong: Bool = false

    public init() {}

    public init(messages: [Comm_Message] = [],
      tooLong: Bool = false)
    {
      if !messages.isEmpty {
        self.messages = messages
      }
      self.tooLong = tooLong
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Message.self, value: &messages)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &tooLong)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: messages, protoFieldNumber: 1, protoFieldName: "messages", jsonFieldName: "messages", swiftFieldName: "messages")
      }
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: tooLong, protoFieldNumber: 2, protoFieldName: "too_long", jsonFieldName: "tooLong", swiftFieldName: "tooLong")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListMessage.Reply) -> Bool {
      if messages != other.messages {return false}
      if tooLong != other.tooLong {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListMessage.Reply>, Comm_Reply>(protoFieldNumber: 170, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListMessage_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListHistory: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListHistory"}
  public var protoMessageName: String {return "ListHistory"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListHistory.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
      "count": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
      "count": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public var count: UInt32? = nil

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data(),
      count: UInt32? = nil)
    {
      self.chatId = chatId
      self.messageId = messageId
      self.count = count
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &count)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      if let v = count {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 3, protoFieldName: "count", jsonFieldName: "count", swiftFieldName: "count")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListHistory.Request) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if ((count != nil || other.count != nil) && (count == nil || other.count == nil || count! != other.count!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListHistory.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "messages": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "messages": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var messages: [Comm_Message] = []

    public init() {}

    public init(messages: [Comm_Message] = [])
    {
      if !messages.isEmpty {
        self.messages = messages
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Message.self, value: &messages)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: messages, protoFieldNumber: 1, protoFieldName: "messages", jsonFieldName: "messages", swiftFieldName: "messages")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListHistory.Reply) -> Bool {
      if messages != other.messages {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListHistory.Reply>, Comm_Reply>(protoFieldNumber: 171, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListHistory_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListHistory) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_MarkRead: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_MarkRead"}
  public var protoMessageName: String {return "MarkRead"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_MarkRead.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_MarkRead.Request) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_MarkRead.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_MarkRead.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_MarkRead.Reply>, Comm_Reply>(protoFieldNumber: 172, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_MarkRead_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_MarkRead) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_SendMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_SendMessage"}
  public var protoMessageName: String {return "SendMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendMessage.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_SendMessage.Request
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendMessage.Request) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendMessage.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_SendMessage.Reply
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendMessage.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_SendMessage.Reply>, Comm_Reply>(protoFieldNumber: 173, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_SendMessage_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_SendMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_SendTyping: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_SendTyping"}
  public var protoMessageName: String {return "SendTyping"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendTyping.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendTyping.Request) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendTyping.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendTyping.Reply) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_SendTyping.Reply>, Comm_Reply>(protoFieldNumber: 174, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_SendTyping_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_SendTyping) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_UploadPhoto: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_UploadPhoto"}
  public var protoMessageName: String {return "UploadPhoto"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UploadPhoto.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UploadPhoto.Request
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UploadPhoto.Request) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UploadPhoto.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UploadPhoto.Reply
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UploadPhoto.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_UploadPhoto.Reply>, Comm_Reply>(protoFieldNumber: 175, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_UploadPhoto_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_UploadPhoto) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_UploadFile: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_UploadFile"}
  public var protoMessageName: String {return "UploadFile"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UploadFile.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UploadFile.Request
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UploadFile.Request) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UploadFile.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UploadFile.Reply
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UploadFile.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_UploadFile.Reply>, Comm_Reply>(protoFieldNumber: 176, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_UploadFile_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_UploadFile) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_DeleteMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_DeleteMessage"}
  public var protoMessageName: String {return "DeleteMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_DeleteMessage.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_DeleteMessage.Request) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_DeleteMessage.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_DeleteMessage.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_DeleteMessage.Reply>, Comm_Reply>(protoFieldNumber: 177, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_DeleteMessage_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_DeleteMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_EditMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_EditMessage"}
  public var protoMessageName: String {return "EditMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_EditMessage.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
      "data": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
      "data": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public var data: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data(),
      data: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
      self.data = data
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &data)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: data, protoFieldNumber: 3, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_EditMessage.Request) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if data != other.data {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_EditMessage.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
      "data": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
      "data": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public var data: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data(),
      data: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
      self.data = data
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &data)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: data, protoFieldNumber: 3, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_EditMessage.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if data != other.data {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_EditMessage.Reply>, Comm_Reply>(protoFieldNumber: 178, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_EditMessage_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_EditMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_UploadVoice: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_UploadVoice"}
  public var protoMessageName: String {return "UploadVoice"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UploadVoice.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UploadVoice.Request
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UploadVoice.Request) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UploadVoice.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UploadVoice.Reply
      var unknown = ProtobufUnknownStorage()
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UploadVoice.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_UploadVoice.Reply>, Comm_Reply>(protoFieldNumber: 179, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_UploadVoice_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_UploadVoice) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_SendSystemMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_SendSystemMessage"}
  public var protoMessageName: String {return "SendSystemMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendSystemMessage.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "type": 1,
      "time": 2,
      "data": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "type": 1,
      "time": 2,
      "data": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var type: UInt32 = 0

    public var time: UInt64 = 0

    public var data: Data = Data()

    public init() {}

    public init(type: UInt32 = 0,
      time: UInt64 = 0,
      data: Data = Data())
    {
      self.type = type
      self.time = time
      self.data = data
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &time)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &data)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: time, protoFieldNumber: 2, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: data, protoFieldNumber: 3, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendSystemMessage.Request) -> Bool {
      if type != other.type {return false}
      if time != other.time {return false}
      if data != other.data {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendSystemMessage.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendSystemMessage.Reply) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_SendSystemMessage.Reply>, Comm_Reply>(protoFieldNumber: 180, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_SendSystemMessage_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_SendSystemMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_SendSMSOutManual: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_SendSMSOutManual"}
  public var protoMessageName: String {return "SendSMSOutManual"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendSMSOutManual.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendSMSOutManual.Request) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SendSMSOutManual.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SendSMSOutManual.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_SendSMSOutManual.Reply>, Comm_Reply>(protoFieldNumber: 181, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_SendSMSOutManual_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_SendSMSOutManual) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_MarkDelivered: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_MarkDelivered"}
  public var protoMessageName: String {return "MarkDelivered"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_MarkDelivered.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data = Data())
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: messageId, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_MarkDelivered.Request) -> Bool {
      if chatId != other.chatId {return false}
      if messageId != other.messageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_MarkDelivered.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_MarkDelivered.Reply) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_MarkDelivered.Reply>, Comm_Reply>(protoFieldNumber: 182, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_MarkDelivered_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_MarkDelivered) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_MarkReadAll: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_MarkReadAll"}
  public var protoMessageName: String {return "MarkReadAll"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_MarkReadAll.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_MarkReadAll.Request) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_MarkReadAll.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_MarkReadAll.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_MarkReadAll.Reply>, Comm_Reply>(protoFieldNumber: 183, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_MarkReadAll_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_MarkReadAll) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListRangeMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListRangeMessage"}
  public var protoMessageName: String {return "ListRangeMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListRangeMessage.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "lowerMessageId": 2,
      "upperMessageId": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "lower_message_id": 2,
      "upper_message_id": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var lowerMessageId: Data = Data()

    public var upperMessageId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      lowerMessageId: Data = Data(),
      upperMessageId: Data = Data())
    {
      self.chatId = chatId
      self.lowerMessageId = lowerMessageId
      self.upperMessageId = upperMessageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &lowerMessageId)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &upperMessageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: lowerMessageId, protoFieldNumber: 2, protoFieldName: "lower_message_id", jsonFieldName: "lowerMessageId", swiftFieldName: "lowerMessageId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: upperMessageId, protoFieldNumber: 3, protoFieldName: "upper_message_id", jsonFieldName: "upperMessageId", swiftFieldName: "upperMessageId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListRangeMessage.Request) -> Bool {
      if chatId != other.chatId {return false}
      if lowerMessageId != other.lowerMessageId {return false}
      if upperMessageId != other.upperMessageId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListRangeMessage.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messages": 2,
      "tooLong": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "messages": 2,
      "too_long": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messages: [Comm_Message] = []

    public var tooLong: Bool = false

    public init() {}

    public init(chatId: Data = Data(),
      messages: [Comm_Message] = [],
      tooLong: Bool = false)
    {
      self.chatId = chatId
      if !messages.isEmpty {
        self.messages = messages
      }
      self.tooLong = tooLong
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Message.self, value: &messages)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &tooLong)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      if !messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: messages, protoFieldNumber: 2, protoFieldName: "messages", jsonFieldName: "messages", swiftFieldName: "messages")
      }
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: tooLong, protoFieldNumber: 3, protoFieldName: "too_long", jsonFieldName: "tooLong", swiftFieldName: "tooLong")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListRangeMessage.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if messages != other.messages {return false}
      if tooLong != other.tooLong {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListRangeMessage.Reply>, Comm_Reply>(protoFieldNumber: 184, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListRangeMessage_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListRangeMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListMessage1: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListMessage1"}
  public var protoMessageName: String {return "ListMessage1"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListMessage1.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "messageId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "message_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var messageId: Data? = nil

    public init() {}

    public init(chatId: Data = Data(),
      messageId: Data? = nil)
    {
      self.chatId = chatId
      self.messageId = messageId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &messageId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      if let v = messageId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 2, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListMessage1.Request) -> Bool {
      if chatId != other.chatId {return false}
      if ((messageId != nil || other.messageId != nil) && (messageId == nil || other.messageId == nil || messageId! != other.messageId!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListMessage1.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "messages": 1,
      "tooLong": 2,
      "chatId": 3,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "messages": 1,
      "too_long": 2,
      "chat_id": 3,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var messages: [Comm_Message] = []

    public var tooLong: Bool = false

    public var chatId: Data = Data()

    public init() {}

    public init(messages: [Comm_Message] = [],
      tooLong: Bool = false,
      chatId: Data = Data())
    {
      if !messages.isEmpty {
        self.messages = messages
      }
      self.tooLong = tooLong
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Message.self, value: &messages)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &tooLong)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: messages, protoFieldNumber: 1, protoFieldName: "messages", jsonFieldName: "messages", swiftFieldName: "messages")
      }
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: tooLong, protoFieldNumber: 2, protoFieldName: "too_long", jsonFieldName: "tooLong", swiftFieldName: "tooLong")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 3, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListMessage1.Reply) -> Bool {
      if messages != other.messages {return false}
      if tooLong != other.tooLong {return false}
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListMessage1.Reply>, Comm_Reply>(protoFieldNumber: 185, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListMessage1_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListMessage1) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

extension Comm_Receive {
  public var Comm_ReceiveTyping_receiveTyping: Comm_ReceiveTyping? {
    get {return getExtensionValue(ext: Comm_ReceiveTyping.Extensions.Comm_Receive_receiveTyping)}
    set {setExtensionValue(ext: Comm_ReceiveTyping.Extensions.Comm_Receive_receiveTyping, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveRead_receiveRead: Comm_ReceiveRead? {
    get {return getExtensionValue(ext: Comm_ReceiveRead.Extensions.Comm_Receive_receiveRead)}
    set {setExtensionValue(ext: Comm_ReceiveRead.Extensions.Comm_Receive_receiveRead, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveMessage_receiveMessage: Comm_ReceiveMessage? {
    get {return getExtensionValue(ext: Comm_ReceiveMessage.Extensions.Comm_Receive_receiveMessage)}
    set {setExtensionValue(ext: Comm_ReceiveMessage.Extensions.Comm_Receive_receiveMessage, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveDelivered_receiveDelivered: Comm_ReceiveDelivered? {
    get {return getExtensionValue(ext: Comm_ReceiveDelivered.Extensions.Comm_Receive_receiveDelivered)}
    set {setExtensionValue(ext: Comm_ReceiveDelivered.Extensions.Comm_Receive_receiveDelivered, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveReadAll_receiveReadAll: Comm_ReceiveReadAll? {
    get {return getExtensionValue(ext: Comm_ReceiveReadAll.Extensions.Comm_Receive_receiveReadAll)}
    set {setExtensionValue(ext: Comm_ReceiveReadAll.Extensions.Comm_Receive_receiveReadAll, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListMessage_id: Comm_ListMessage.Reply? {
    get {return getExtensionValue(ext: Comm_ListMessage.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListMessage.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListHistory_id: Comm_ListHistory.Reply? {
    get {return getExtensionValue(ext: Comm_ListHistory.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListHistory.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_MarkRead_id: Comm_MarkRead.Reply? {
    get {return getExtensionValue(ext: Comm_MarkRead.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_MarkRead.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_SendMessage_id: Comm_SendMessage.Reply? {
    get {return getExtensionValue(ext: Comm_SendMessage.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_SendMessage.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_SendTyping_id: Comm_SendTyping.Reply? {
    get {return getExtensionValue(ext: Comm_SendTyping.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_SendTyping.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_UploadPhoto_id: Comm_UploadPhoto.Reply? {
    get {return getExtensionValue(ext: Comm_UploadPhoto.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_UploadPhoto.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_UploadFile_id: Comm_UploadFile.Reply? {
    get {return getExtensionValue(ext: Comm_UploadFile.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_UploadFile.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_DeleteMessage_id: Comm_DeleteMessage.Reply? {
    get {return getExtensionValue(ext: Comm_DeleteMessage.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_DeleteMessage.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_EditMessage_id: Comm_EditMessage.Reply? {
    get {return getExtensionValue(ext: Comm_EditMessage.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_EditMessage.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_UploadVoice_id: Comm_UploadVoice.Reply? {
    get {return getExtensionValue(ext: Comm_UploadVoice.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_UploadVoice.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_SendSystemMessage_id: Comm_SendSystemMessage.Reply? {
    get {return getExtensionValue(ext: Comm_SendSystemMessage.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_SendSystemMessage.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_SendSMSOutManual_id: Comm_SendSMSOutManual.Reply? {
    get {return getExtensionValue(ext: Comm_SendSMSOutManual.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_SendSMSOutManual.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_MarkDelivered_id: Comm_MarkDelivered.Reply? {
    get {return getExtensionValue(ext: Comm_MarkDelivered.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_MarkDelivered.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_MarkReadAll_id: Comm_MarkReadAll.Reply? {
    get {return getExtensionValue(ext: Comm_MarkReadAll.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_MarkReadAll.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListRangeMessage_id: Comm_ListRangeMessage.Reply? {
    get {return getExtensionValue(ext: Comm_ListRangeMessage.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListRangeMessage.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListMessage1_id: Comm_ListMessage1.Reply? {
    get {return getExtensionValue(ext: Comm_ListMessage1.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListMessage1.Extensions.Comm_Reply_id, value: newValue)}
  }
}

public let Comm_CommMessage_Extensions: ProtobufExtensionSet = [
  Comm_ReceiveTyping.Extensions.Comm_Receive_receiveTyping,
  Comm_ReceiveRead.Extensions.Comm_Receive_receiveRead,
  Comm_ReceiveMessage.Extensions.Comm_Receive_receiveMessage,
  Comm_ReceiveDelivered.Extensions.Comm_Receive_receiveDelivered,
  Comm_ReceiveReadAll.Extensions.Comm_Receive_receiveReadAll,
  Comm_ListMessage.Extensions.Comm_Reply_id,
  Comm_ListHistory.Extensions.Comm_Reply_id,
  Comm_MarkRead.Extensions.Comm_Reply_id,
  Comm_SendMessage.Extensions.Comm_Reply_id,
  Comm_SendTyping.Extensions.Comm_Reply_id,
  Comm_UploadPhoto.Extensions.Comm_Reply_id,
  Comm_UploadFile.Extensions.Comm_Reply_id,
  Comm_DeleteMessage.Extensions.Comm_Reply_id,
  Comm_EditMessage.Extensions.Comm_Reply_id,
  Comm_UploadVoice.Extensions.Comm_Reply_id,
  Comm_SendSystemMessage.Extensions.Comm_Reply_id,
  Comm_SendSMSOutManual.Extensions.Comm_Reply_id,
  Comm_MarkDelivered.Extensions.Comm_Reply_id,
  Comm_MarkReadAll.Extensions.Comm_Reply_id,
  Comm_ListRangeMessage.Extensions.Comm_Reply_id,
  Comm_ListMessage1.Extensions.Comm_Reply_id
]
