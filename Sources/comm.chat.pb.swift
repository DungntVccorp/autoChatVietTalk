/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: comm.chat.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Comm_ReceiveChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveChat"}
  public var protoMessageName: String {return "ReceiveChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chat": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_ReceiveChat
    var unknown = ProtobufUnknownStorage()
    var _chat: Comm_Chat? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Chat.self, value: &_chat)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _chat {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "chat", jsonFieldName: "chat", swiftFieldName: "chat")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _chat != other._chat {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._chat = _chat
      return clone
    }
  }

  private var _storage = _StorageClass()

  struct Extensions {

    static let Comm_Receive_receiveChat = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveChat>, Comm_Receive>(protoFieldNumber: 10, protoFieldName: "RECEIVE_CHAT", jsonFieldName: "rECEIVECHAT", swiftFieldName: "Comm_ReceiveChat_receiveChat", defaultValue: nil)
  }

  public var chat: Comm_Chat {
    get {return _storage._chat ?? Comm_Chat()}
    set {_uniqueStorage()._chat = newValue}
  }

  public init() {}

  public init(chat: Comm_Chat? = nil)
  {
    let storage = _uniqueStorage()
    storage._chat = chat
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveChat) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_ReceiveMembers: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveMembers"}
  public var protoMessageName: String {return "ReceiveMembers"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "type": 2,
    "name": 3,
    "members": 4,
    "userName": 5,
    "userAvatar": 6,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "type": 2,
    "name": 3,
    "members": 4,
    "user_name": 5,
    "user_avatar": 6,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case update // = 0
    case add // = 1
    case remove // = 2
    case leave // = 3

    public init() {
      self = .update
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .update
      case 1: self = .add
      case 2: self = .remove
      case 3: self = .leave
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "update": self = .update
      case "add": self = .add
      case "remove": self = .remove
      case "leave": self = .leave
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "UPDATE": self = .update
      case "ADD": self = .add
      case "REMOVE": self = .remove
      case "LEAVE": self = .leave
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "UPDATE": self = .update
      case "ADD": self = .add
      case "REMOVE": self = .remove
      case "LEAVE": self = .leave
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .update: return 0
        case .add: return 1
        case .remove: return 2
        case .leave: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .update: return "\"UPDATE\""
        case .add: return "\"ADD\""
        case .remove: return "\"REMOVE\""
        case .leave: return "\"LEAVE\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .update: return ".update"
        case .add: return ".add"
        case .remove: return ".remove"
        case .leave: return ".leave"
        }
      }
    }

  }

  struct Extensions {

    static let Comm_Receive_receiveMembers = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveMembers>, Comm_Receive>(protoFieldNumber: 11, protoFieldName: "RECEIVE_MEMBERS", jsonFieldName: "rECEIVEMEMBERS", swiftFieldName: "Comm_ReceiveMembers_receiveMembers", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var type: UInt32 = 0

  public var name: String? = nil

  public var members: [Comm_Member] = []

  public var userName: String? = nil

  public var userAvatar: String? = nil

  public init() {}

  public init(chatId: Data = Data(),
    type: UInt32 = 0,
    name: String? = nil,
    members: [Comm_Member] = [],
    userName: String? = nil,
    userAvatar: String? = nil)
  {
    self.chatId = chatId
    self.type = type
    self.name = name
    if !members.isEmpty {
      self.members = members
    }
    self.userName = userName
    self.userAvatar = userAvatar
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
    case 4: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Member.self, value: &members)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &userName)
    case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &userAvatar)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 2, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    if let v = name {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if !members.isEmpty {
      try visitor.visitRepeatedMessageField(value: members, protoFieldNumber: 4, protoFieldName: "members", jsonFieldName: "members", swiftFieldName: "members")
    }
    if let v = userName {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "user_name", jsonFieldName: "userName", swiftFieldName: "userName")
    }
    if let v = userAvatar {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "user_avatar", jsonFieldName: "userAvatar", swiftFieldName: "userAvatar")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveMembers) -> Bool {
    if chatId != other.chatId {return false}
    if type != other.type {return false}
    if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
    if members != other.members {return false}
    if ((userName != nil || other.userName != nil) && (userName == nil || other.userName == nil || userName! != other.userName!)) {return false}
    if ((userAvatar != nil || other.userAvatar != nil) && (userAvatar == nil || other.userAvatar == nil || userAvatar! != other.userAvatar!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveDeleteConversation: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveDeleteConversation"}
  public var protoMessageName: String {return "ReceiveDeleteConversation"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveDeleteConversation = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveDeleteConversation>, Comm_Receive>(protoFieldNumber: 12, protoFieldName: "RECEIVE_DELETE_CONVERSATION", jsonFieldName: "rECEIVEDELETECONVERSATION", swiftFieldName: "Comm_ReceiveDeleteConversation_receiveDeleteConversation", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public init() {}

  public init(chatId: Data = Data())
  {
    self.chatId = chatId
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveDeleteConversation) -> Bool {
    if chatId != other.chatId {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceivePassChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceivePassChat"}
  public var protoMessageName: String {return "ReceivePassChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "type": 1,
    "pass": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "type": 1,
    "pass": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case create // = 0
    case update // = 1
    case deleted // = 2

    public init() {
      self = .create
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .create
      case 1: self = .update
      case 2: self = .deleted
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "create": self = .create
      case "update": self = .update
      case "deleted": self = .deleted
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "CREATE": self = .create
      case "UPDATE": self = .update
      case "DELETED": self = .deleted
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "CREATE": self = .create
      case "UPDATE": self = .update
      case "DELETED": self = .deleted
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .create: return 0
        case .update: return 1
        case .deleted: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .create: return "\"CREATE\""
        case .update: return "\"UPDATE\""
        case .deleted: return "\"DELETED\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .create: return ".create"
        case .update: return ".update"
        case .deleted: return ".deleted"
        }
      }
    }

  }

  struct Extensions {

    static let Comm_Receive_receivePassChat = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceivePassChat>, Comm_Receive>(protoFieldNumber: 13, protoFieldName: "RECEIVE_PASS_CHAT", jsonFieldName: "rECEIVEPASSCHAT", swiftFieldName: "Comm_ReceivePassChat_receivePassChat", defaultValue: nil)
  }

  public var type: UInt32 = 0

  public var pass: String = ""

  public init() {}

  public init(type: UInt32 = 0,
    pass: String = "")
  {
    self.type = type
    self.pass = pass
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &pass)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: pass, protoFieldNumber: 2, protoFieldName: "pass", jsonFieldName: "pass", swiftFieldName: "pass")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceivePassChat) -> Bool {
    if type != other.type {return false}
    if pass != other.pass {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceivePrivateChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceivePrivateChat"}
  public var protoMessageName: String {return "ReceivePrivateChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "isPrivate": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "is_private": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receivePrivateChat = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceivePrivateChat>, Comm_Receive>(protoFieldNumber: 14, protoFieldName: "RECEIVE_PRIVATE_CHAT", jsonFieldName: "rECEIVEPRIVATECHAT", swiftFieldName: "Comm_ReceivePrivateChat_receivePrivateChat", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var isPrivate: Bool = false

  public init() {}

  public init(chatId: Data = Data(),
    isPrivate: Bool = false)
  {
    self.chatId = chatId
    self.isPrivate = isPrivate
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &isPrivate)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufBool.self, value: isPrivate, protoFieldNumber: 2, protoFieldName: "is_private", jsonFieldName: "isPrivate", swiftFieldName: "isPrivate")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceivePrivateChat) -> Bool {
    if chatId != other.chatId {return false}
    if isPrivate != other.isPrivate {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveTempPhoneChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveTempPhoneChat"}
  public var protoMessageName: String {return "ReceiveTempPhoneChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "tempPhone": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "temp_phone": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveTempphoneChat = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveTempPhoneChat>, Comm_Receive>(protoFieldNumber: 15, protoFieldName: "RECEIVE_TEMPPHONE_CHAT", jsonFieldName: "rECEIVETEMPPHONECHAT", swiftFieldName: "Comm_ReceiveTempPhoneChat_receiveTempphoneChat", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var tempPhone: String = ""

  public init() {}

  public init(chatId: Data = Data(),
    tempPhone: String = "")
  {
    self.chatId = chatId
    self.tempPhone = tempPhone
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &tempPhone)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: tempPhone, protoFieldNumber: 2, protoFieldName: "temp_phone", jsonFieldName: "tempPhone", swiftFieldName: "tempPhone")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveTempPhoneChat) -> Bool {
    if chatId != other.chatId {return false}
    if tempPhone != other.tempPhone {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveUpdateSmsMode: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveUpdateSmsMode"}
  public var protoMessageName: String {return "ReceiveUpdateSmsMode"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "autoMode": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "auto_mode": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveUpdateSmsmode = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveUpdateSmsMode>, Comm_Receive>(protoFieldNumber: 16, protoFieldName: "RECEIVE_UPDATE_SMSMODE", jsonFieldName: "rECEIVEUPDATESMSMODE", swiftFieldName: "Comm_ReceiveUpdateSmsMode_receiveUpdateSmsmode", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var autoMode: Bool = false

  public init() {}

  public init(chatId: Data = Data(),
    autoMode: Bool = false)
  {
    self.chatId = chatId
    self.autoMode = autoMode
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &autoMode)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufBool.self, value: autoMode, protoFieldNumber: 2, protoFieldName: "auto_mode", jsonFieldName: "autoMode", swiftFieldName: "autoMode")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveUpdateSmsMode) -> Bool {
    if chatId != other.chatId {return false}
    if autoMode != other.autoMode {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveChangeGroupAvatar: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveChangeGroupAvatar"}
  public var protoMessageName: String {return "ReceiveChangeGroupAvatar"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "avatar": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "avatar": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveChangeGroupAvtar = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveChangeGroupAvatar>, Comm_Receive>(protoFieldNumber: 17, protoFieldName: "RECEIVE_CHANGE_GROUP_AVTAR", jsonFieldName: "rECEIVECHANGEGROUPAVTAR", swiftFieldName: "Comm_ReceiveChangeGroupAvatar_receiveChangeGroupAvtar", defaultValue: nil)
  }

  public var chatId: Data = Data()

  public var avatar: String = ""

  public init() {}

  public init(chatId: Data = Data(),
    avatar: String = "")
  {
    self.chatId = chatId
    self.avatar = avatar
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &avatar)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: avatar, protoFieldNumber: 2, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveChangeGroupAvatar) -> Bool {
    if chatId != other.chatId {return false}
    if avatar != other.avatar {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListChats: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListChats"}
  public var protoMessageName: String {return "ListChats"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListChats.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "lastTime": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "last_time": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var lastTime: UInt64 = 0

    public init() {}

    public init(lastTime: UInt64 = 0)
    {
      self.lastTime = lastTime
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &lastTime)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: lastTime, protoFieldNumber: 1, protoFieldName: "last_time", jsonFieldName: "lastTime", swiftFieldName: "lastTime")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListChats.Request) -> Bool {
      if lastTime != other.lastTime {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListChats.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chats": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chats": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chats: [Comm_Chat] = []

    public init() {}

    public init(chats: [Comm_Chat] = [])
    {
      if !chats.isEmpty {
        self.chats = chats
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Chat.self, value: &chats)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !chats.isEmpty {
        try visitor.visitRepeatedMessageField(value: chats, protoFieldNumber: 1, protoFieldName: "chats", jsonFieldName: "chats", swiftFieldName: "chats")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListChats.Reply) -> Bool {
      if chats != other.chats {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListChats.Reply>, Comm_Reply>(protoFieldNumber: 140, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListChats_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListChats) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_CreateChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_CreateChat"}
  public var protoMessageName: String {return "CreateChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_CreateChat.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "members": 1,
      "tel": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "members": 1,
      "tel": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var members: [Data] = []

    ///   if create peer chat that user has not contact_id
    public var tel: String? = nil

    public init() {}

    public init(members: [Data] = [],
      tel: String? = nil)
    {
      if !members.isEmpty {
        self.members = members
      }
      self.tel = tel
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &members)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &tel)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !members.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: members, protoFieldNumber: 1, protoFieldName: "members", jsonFieldName: "members", swiftFieldName: "members")
      }
      if let v = tel {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "tel", jsonFieldName: "tel", swiftFieldName: "tel")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_CreateChat.Request) -> Bool {
      if members != other.members {return false}
      if ((tel != nil || other.tel != nil) && (tel == nil || other.tel == nil || tel! != other.tel!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_CreateChat.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chat": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_CreateChat.Reply
      var unknown = ProtobufUnknownStorage()
      var _chat: Comm_Chat? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Chat.self, value: &_chat)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _chat {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "chat", jsonFieldName: "chat", swiftFieldName: "chat")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _chat != other._chat {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._chat = _chat
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var chat: Comm_Chat {
      get {return _storage._chat ?? Comm_Chat()}
      set {_uniqueStorage()._chat = newValue}
    }

    public init() {}

    public init(chat: Comm_Chat? = nil)
    {
      let storage = _uniqueStorage()
      storage._chat = chat
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_CreateChat.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_CreateChat.Reply>, Comm_Reply>(protoFieldNumber: 141, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_CreateChat_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_CreateChat) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListMembers: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListMembers"}
  public var protoMessageName: String {return "ListMembers"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListMembers.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListMembers.Request) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListMembers.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "members": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "members": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var members: [Comm_Member] = []

    public init() {}

    public init(chatId: Data = Data(),
      members: [Comm_Member] = [])
    {
      self.chatId = chatId
      if !members.isEmpty {
        self.members = members
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Member.self, value: &members)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      if !members.isEmpty {
        try visitor.visitRepeatedMessageField(value: members, protoFieldNumber: 2, protoFieldName: "members", jsonFieldName: "members", swiftFieldName: "members")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListMembers.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if members != other.members {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListMembers.Reply>, Comm_Reply>(protoFieldNumber: 142, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListMembers_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListMembers) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_AddMembers: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_AddMembers"}
  public var protoMessageName: String {return "AddMembers"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_AddMembers.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "userIds": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "user_ids": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var userIds: [Data] = []

    public init() {}

    public init(chatId: Data = Data(),
      userIds: [Data] = [])
    {
      self.chatId = chatId
      if !userIds.isEmpty {
        self.userIds = userIds
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &userIds)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      if !userIds.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: userIds, protoFieldNumber: 2, protoFieldName: "user_ids", jsonFieldName: "userIds", swiftFieldName: "userIds")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_AddMembers.Request) -> Bool {
      if chatId != other.chatId {return false}
      if userIds != other.userIds {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_AddMembers.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chat": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_AddMembers.Reply
      var unknown = ProtobufUnknownStorage()
      var _chat: Comm_Chat? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Chat.self, value: &_chat)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _chat {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "chat", jsonFieldName: "chat", swiftFieldName: "chat")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _chat != other._chat {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._chat = _chat
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var chat: Comm_Chat {
      get {return _storage._chat ?? Comm_Chat()}
      set {_uniqueStorage()._chat = newValue}
    }

    public init() {}

    public init(chat: Comm_Chat? = nil)
    {
      let storage = _uniqueStorage()
      storage._chat = chat
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_AddMembers.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_AddMembers.Reply>, Comm_Reply>(protoFieldNumber: 143, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_AddMembers_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_AddMembers) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_RemoveMember: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_RemoveMember"}
  public var protoMessageName: String {return "RemoveMember"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_RemoveMember.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "userId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "user_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var userId: Data = Data()

    public init() {}

    public init(chatId: Data = Data(),
      userId: Data = Data())
    {
      self.chatId = chatId
      self.userId = userId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &userId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: userId, protoFieldNumber: 2, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_RemoveMember.Request) -> Bool {
      if chatId != other.chatId {return false}
      if userId != other.userId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_RemoveMember.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chat": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat": 1,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_RemoveMember.Reply
      var unknown = ProtobufUnknownStorage()
      var _chat: Comm_Chat? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Chat.self, value: &_chat)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _chat {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "chat", jsonFieldName: "chat", swiftFieldName: "chat")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _chat != other._chat {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._chat = _chat
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var chat: Comm_Chat {
      get {return _storage._chat ?? Comm_Chat()}
      set {_uniqueStorage()._chat = newValue}
    }

    public init() {}

    public init(chat: Comm_Chat? = nil)
    {
      let storage = _uniqueStorage()
      storage._chat = chat
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_RemoveMember.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_RemoveMember.Reply>, Comm_Reply>(protoFieldNumber: 144, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_RemoveMember_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_RemoveMember) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_LeaveChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_LeaveChat"}
  public var protoMessageName: String {return "LeaveChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_LeaveChat.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_LeaveChat.Request) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_LeaveChat.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_LeaveChat.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_LeaveChat.Reply>, Comm_Reply>(protoFieldNumber: 145, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_LeaveChat_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_LeaveChat) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_UpdateGroup: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_UpdateGroup"}
  public var protoMessageName: String {return "UpdateGroup"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UpdateGroup.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "name": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "name": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var name: String = ""

    public init() {}

    public init(chatId: Data = Data(),
      name: String = "")
    {
      self.chatId = chatId
      self.name = name
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &name)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 2, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UpdateGroup.Request) -> Bool {
      if chatId != other.chatId {return false}
      if name != other.name {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UpdateGroup.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "name": 1,
      "message": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "name": 1,
      "message": 2,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_UpdateGroup.Reply
      var unknown = ProtobufUnknownStorage()
      var _name: String = ""
      var _message: Comm_Message? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_name)
        case 2: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Message.self, value: &_message)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _name != other._name {return false}
        if _message != other._message {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._name = _name
        clone._message = _message
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    public var message: Comm_Message {
      get {return _storage._message ?? Comm_Message()}
      set {_uniqueStorage()._message = newValue}
    }

    public init() {}

    public init(name: String = "",
      message: Comm_Message? = nil)
    {
      let storage = _uniqueStorage()
      storage._name = name
      storage._message = message
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UpdateGroup.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_UpdateGroup.Reply>, Comm_Reply>(protoFieldNumber: 146, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_UpdateGroup_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_UpdateGroup) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_UpdateSMSMode: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_UpdateSMSMode"}
  public var protoMessageName: String {return "UpdateSMSMode"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UpdateSMSMode.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "autoMode": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "auto_mode": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var autoMode: Bool = false

    public init() {}

    public init(chatId: Data = Data(),
      autoMode: Bool = false)
    {
      self.chatId = chatId
      self.autoMode = autoMode
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &autoMode)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: autoMode, protoFieldNumber: 2, protoFieldName: "auto_mode", jsonFieldName: "autoMode", swiftFieldName: "autoMode")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UpdateSMSMode.Request) -> Bool {
      if chatId != other.chatId {return false}
      if autoMode != other.autoMode {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_UpdateSMSMode.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "autoMode": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "auto_mode": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var autoMode: Bool = false

    public init() {}

    public init(chatId: Data = Data(),
      autoMode: Bool = false)
    {
      self.chatId = chatId
      self.autoMode = autoMode
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &autoMode)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: autoMode, protoFieldNumber: 2, protoFieldName: "auto_mode", jsonFieldName: "autoMode", swiftFieldName: "autoMode")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_UpdateSMSMode.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if autoMode != other.autoMode {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_UpdateSMSMode.Reply>, Comm_Reply>(protoFieldNumber: 147, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_UpdateSMSMode_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_UpdateSMSMode) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_DeleteConversation: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_DeleteConversation"}
  public var protoMessageName: String {return "DeleteConversation"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_DeleteConversation.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_DeleteConversation.Request) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_DeleteConversation.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public init() {}

    public init(chatId: Data = Data())
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_DeleteConversation.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_DeleteConversation.Reply>, Comm_Reply>(protoFieldNumber: 148, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_DeleteConversation_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_DeleteConversation) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_SettingPassChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_SettingPassChat"}
  public var protoMessageName: String {return "SettingPassChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case create // = 0
    case update // = 1
    case deleted // = 2

    public init() {
      self = .create
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .create
      case 1: self = .update
      case 2: self = .deleted
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "create": self = .create
      case "update": self = .update
      case "deleted": self = .deleted
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "CREATE": self = .create
      case "UPDATE": self = .update
      case "DELETED": self = .deleted
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "CREATE": self = .create
      case "UPDATE": self = .update
      case "DELETED": self = .deleted
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .create: return 0
        case .update: return 1
        case .deleted: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .create: return "\"CREATE\""
        case .update: return "\"UPDATE\""
        case .deleted: return "\"DELETED\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .create: return ".create"
        case .update: return ".update"
        case .deleted: return ".deleted"
        }
      }
    }

  }

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SettingPassChat.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "type": 1,
      "pass": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "type": 1,
      "pass": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var type: UInt32 = 0

    public var pass: String = ""

    public init() {}

    public init(type: UInt32 = 0,
      pass: String = "")
    {
      self.type = type
      self.pass = pass
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &pass)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: pass, protoFieldNumber: 2, protoFieldName: "pass", jsonFieldName: "pass", swiftFieldName: "pass")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SettingPassChat.Request) -> Bool {
      if type != other.type {return false}
      if pass != other.pass {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SettingPassChat.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SettingPassChat.Reply) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_SettingPassChat.Reply>, Comm_Reply>(protoFieldNumber: 149, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_SettingPassChat_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_SettingPassChat) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_PrivateChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_PrivateChat"}
  public var protoMessageName: String {return "PrivateChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_PrivateChat.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "isPrivate": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "is_private": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var isPrivate: Bool = false

    public init() {}

    public init(chatId: Data = Data(),
      isPrivate: Bool = false)
    {
      self.chatId = chatId
      self.isPrivate = isPrivate
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &isPrivate)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: isPrivate, protoFieldNumber: 2, protoFieldName: "is_private", jsonFieldName: "isPrivate", swiftFieldName: "isPrivate")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_PrivateChat.Request) -> Bool {
      if chatId != other.chatId {return false}
      if isPrivate != other.isPrivate {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_PrivateChat.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "isPrivate": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "is_private": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var isPrivate: Bool = false

    public init() {}

    public init(chatId: Data = Data(),
      isPrivate: Bool = false)
    {
      self.chatId = chatId
      self.isPrivate = isPrivate
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &isPrivate)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: isPrivate, protoFieldNumber: 2, protoFieldName: "is_private", jsonFieldName: "isPrivate", swiftFieldName: "isPrivate")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_PrivateChat.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if isPrivate != other.isPrivate {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_PrivateChat.Reply>, Comm_Reply>(protoFieldNumber: 150, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_PrivateChat_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_PrivateChat) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_SettingTempPhoneChat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_SettingTempPhoneChat"}
  public var protoMessageName: String {return "SettingTempPhoneChat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SettingTempPhoneChat.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "tempPhone": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "temp_phone": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var tempPhone: String = ""

    public init() {}

    public init(chatId: Data = Data(),
      tempPhone: String = "")
    {
      self.chatId = chatId
      self.tempPhone = tempPhone
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &tempPhone)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: tempPhone, protoFieldNumber: 2, protoFieldName: "temp_phone", jsonFieldName: "tempPhone", swiftFieldName: "tempPhone")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SettingTempPhoneChat.Request) -> Bool {
      if chatId != other.chatId {return false}
      if tempPhone != other.tempPhone {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_SettingTempPhoneChat.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "tempPhone": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "temp_phone": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var tempPhone: String = ""

    public init() {}

    public init(chatId: Data = Data(),
      tempPhone: String = "")
    {
      self.chatId = chatId
      self.tempPhone = tempPhone
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &tempPhone)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: tempPhone, protoFieldNumber: 2, protoFieldName: "temp_phone", jsonFieldName: "tempPhone", swiftFieldName: "tempPhone")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_SettingTempPhoneChat.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if tempPhone != other.tempPhone {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_SettingTempPhoneChat.Reply>, Comm_Reply>(protoFieldNumber: 151, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_SettingTempPhoneChat_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_SettingTempPhoneChat) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ChangeGroupAvatar: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ChangeGroupAvatar"}
  public var protoMessageName: String {return "ChangeGroupAvatar"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ChangeGroupAvatar.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data? = nil

    public init() {}

    public init(chatId: Data? = nil)
    {
      self.chatId = chatId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &chatId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = chatId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ChangeGroupAvatar.Request) -> Bool {
      if ((chatId != nil || other.chatId != nil) && (chatId == nil || other.chatId == nil || chatId! != other.chatId!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ChangeGroupAvatar.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "chatId": 1,
      "avatar": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "chat_id": 1,
      "avatar": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var chatId: Data = Data()

    public var avatar: String = ""

    public init() {}

    public init(chatId: Data = Data(),
      avatar: String = "")
    {
      self.chatId = chatId
      self.avatar = avatar
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &avatar)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: avatar, protoFieldNumber: 2, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ChangeGroupAvatar.Reply) -> Bool {
      if chatId != other.chatId {return false}
      if avatar != other.avatar {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ChangeGroupAvatar.Reply>, Comm_Reply>(protoFieldNumber: 152, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ChangeGroupAvatar_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ChangeGroupAvatar) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

extension Comm_Receive {
  public var Comm_ReceiveChat_receiveChat: Comm_ReceiveChat? {
    get {return getExtensionValue(ext: Comm_ReceiveChat.Extensions.Comm_Receive_receiveChat)}
    set {setExtensionValue(ext: Comm_ReceiveChat.Extensions.Comm_Receive_receiveChat, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveMembers_receiveMembers: Comm_ReceiveMembers? {
    get {return getExtensionValue(ext: Comm_ReceiveMembers.Extensions.Comm_Receive_receiveMembers)}
    set {setExtensionValue(ext: Comm_ReceiveMembers.Extensions.Comm_Receive_receiveMembers, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveDeleteConversation_receiveDeleteConversation: Comm_ReceiveDeleteConversation? {
    get {return getExtensionValue(ext: Comm_ReceiveDeleteConversation.Extensions.Comm_Receive_receiveDeleteConversation)}
    set {setExtensionValue(ext: Comm_ReceiveDeleteConversation.Extensions.Comm_Receive_receiveDeleteConversation, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceivePassChat_receivePassChat: Comm_ReceivePassChat? {
    get {return getExtensionValue(ext: Comm_ReceivePassChat.Extensions.Comm_Receive_receivePassChat)}
    set {setExtensionValue(ext: Comm_ReceivePassChat.Extensions.Comm_Receive_receivePassChat, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceivePrivateChat_receivePrivateChat: Comm_ReceivePrivateChat? {
    get {return getExtensionValue(ext: Comm_ReceivePrivateChat.Extensions.Comm_Receive_receivePrivateChat)}
    set {setExtensionValue(ext: Comm_ReceivePrivateChat.Extensions.Comm_Receive_receivePrivateChat, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveTempPhoneChat_receiveTempphoneChat: Comm_ReceiveTempPhoneChat? {
    get {return getExtensionValue(ext: Comm_ReceiveTempPhoneChat.Extensions.Comm_Receive_receiveTempphoneChat)}
    set {setExtensionValue(ext: Comm_ReceiveTempPhoneChat.Extensions.Comm_Receive_receiveTempphoneChat, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveUpdateSmsMode_receiveUpdateSmsmode: Comm_ReceiveUpdateSmsMode? {
    get {return getExtensionValue(ext: Comm_ReceiveUpdateSmsMode.Extensions.Comm_Receive_receiveUpdateSmsmode)}
    set {setExtensionValue(ext: Comm_ReceiveUpdateSmsMode.Extensions.Comm_Receive_receiveUpdateSmsmode, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveChangeGroupAvatar_receiveChangeGroupAvtar: Comm_ReceiveChangeGroupAvatar? {
    get {return getExtensionValue(ext: Comm_ReceiveChangeGroupAvatar.Extensions.Comm_Receive_receiveChangeGroupAvtar)}
    set {setExtensionValue(ext: Comm_ReceiveChangeGroupAvatar.Extensions.Comm_Receive_receiveChangeGroupAvtar, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListChats_id: Comm_ListChats.Reply? {
    get {return getExtensionValue(ext: Comm_ListChats.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListChats.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_CreateChat_id: Comm_CreateChat.Reply? {
    get {return getExtensionValue(ext: Comm_CreateChat.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_CreateChat.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListMembers_id: Comm_ListMembers.Reply? {
    get {return getExtensionValue(ext: Comm_ListMembers.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListMembers.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_AddMembers_id: Comm_AddMembers.Reply? {
    get {return getExtensionValue(ext: Comm_AddMembers.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_AddMembers.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_RemoveMember_id: Comm_RemoveMember.Reply? {
    get {return getExtensionValue(ext: Comm_RemoveMember.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_RemoveMember.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_LeaveChat_id: Comm_LeaveChat.Reply? {
    get {return getExtensionValue(ext: Comm_LeaveChat.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_LeaveChat.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_UpdateGroup_id: Comm_UpdateGroup.Reply? {
    get {return getExtensionValue(ext: Comm_UpdateGroup.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_UpdateGroup.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_UpdateSMSMode_id: Comm_UpdateSMSMode.Reply? {
    get {return getExtensionValue(ext: Comm_UpdateSMSMode.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_UpdateSMSMode.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_DeleteConversation_id: Comm_DeleteConversation.Reply? {
    get {return getExtensionValue(ext: Comm_DeleteConversation.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_DeleteConversation.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_SettingPassChat_id: Comm_SettingPassChat.Reply? {
    get {return getExtensionValue(ext: Comm_SettingPassChat.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_SettingPassChat.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_PrivateChat_id: Comm_PrivateChat.Reply? {
    get {return getExtensionValue(ext: Comm_PrivateChat.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_PrivateChat.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_SettingTempPhoneChat_id: Comm_SettingTempPhoneChat.Reply? {
    get {return getExtensionValue(ext: Comm_SettingTempPhoneChat.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_SettingTempPhoneChat.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ChangeGroupAvatar_id: Comm_ChangeGroupAvatar.Reply? {
    get {return getExtensionValue(ext: Comm_ChangeGroupAvatar.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ChangeGroupAvatar.Extensions.Comm_Reply_id, value: newValue)}
  }
}

public let Comm_CommChat_Extensions: ProtobufExtensionSet = [
  Comm_ReceiveChat.Extensions.Comm_Receive_receiveChat,
  Comm_ReceiveMembers.Extensions.Comm_Receive_receiveMembers,
  Comm_ReceiveDeleteConversation.Extensions.Comm_Receive_receiveDeleteConversation,
  Comm_ReceivePassChat.Extensions.Comm_Receive_receivePassChat,
  Comm_ReceivePrivateChat.Extensions.Comm_Receive_receivePrivateChat,
  Comm_ReceiveTempPhoneChat.Extensions.Comm_Receive_receiveTempphoneChat,
  Comm_ReceiveUpdateSmsMode.Extensions.Comm_Receive_receiveUpdateSmsmode,
  Comm_ReceiveChangeGroupAvatar.Extensions.Comm_Receive_receiveChangeGroupAvtar,
  Comm_ListChats.Extensions.Comm_Reply_id,
  Comm_CreateChat.Extensions.Comm_Reply_id,
  Comm_ListMembers.Extensions.Comm_Reply_id,
  Comm_AddMembers.Extensions.Comm_Reply_id,
  Comm_RemoveMember.Extensions.Comm_Reply_id,
  Comm_LeaveChat.Extensions.Comm_Reply_id,
  Comm_UpdateGroup.Extensions.Comm_Reply_id,
  Comm_UpdateSMSMode.Extensions.Comm_Reply_id,
  Comm_DeleteConversation.Extensions.Comm_Reply_id,
  Comm_SettingPassChat.Extensions.Comm_Reply_id,
  Comm_PrivateChat.Extensions.Comm_Reply_id,
  Comm_SettingTempPhoneChat.Extensions.Comm_Reply_id,
  Comm_ChangeGroupAvatar.Extensions.Comm_Reply_id
]
