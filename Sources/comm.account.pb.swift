/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: comm.account.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Comm_ReceiveGetAccount: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveGetAccount"}
  public var protoMessageName: String {return "ReceiveGetAccount"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "accountInfor": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "account_infor": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_ReceiveGetAccount
    var unknown = ProtobufUnknownStorage()
    var _accountInfor: Comm_GetAccount.Reply? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: Comm_GetAccount.Reply.self, value: &_accountInfor)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _accountInfor {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "account_infor", jsonFieldName: "accountInfor", swiftFieldName: "accountInfor")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_accountInfor != nil || other._accountInfor != nil) && (_accountInfor == nil || other._accountInfor == nil || _accountInfor! != other._accountInfor!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._accountInfor = _accountInfor
      return clone
    }
  }

  private var _storage = _StorageClass()

  struct Extensions {

    static let Comm_Receive_receiveGetAccount = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveGetAccount>, Comm_Receive>(protoFieldNumber: 60, protoFieldName: "RECEIVE_GET_ACCOUNT", jsonFieldName: "rECEIVEGETACCOUNT", swiftFieldName: "Comm_ReceiveGetAccount_receiveGetAccount", defaultValue: nil)
  }

  public var accountInfor: Comm_GetAccount.Reply? {
    get {return _storage._accountInfor}
    set {_uniqueStorage()._accountInfor = newValue}
  }

  public init() {}

  public init(accountInfor: Comm_GetAccount.Reply? = nil)
  {
    let storage = _uniqueStorage()
    storage._accountInfor = accountInfor
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveGetAccount) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_ReceiveListSubscription: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveListSubscription"}
  public var protoMessageName: String {return "ReceiveListSubscription"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "subscriptions": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "subscriptions": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_ReceiveListSubscription
    var unknown = ProtobufUnknownStorage()
    var _subscriptions: Comm_ListSubscription.Reply? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: Comm_ListSubscription.Reply.self, value: &_subscriptions)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _subscriptions {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "subscriptions", jsonFieldName: "subscriptions", swiftFieldName: "subscriptions")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_subscriptions != nil || other._subscriptions != nil) && (_subscriptions == nil || other._subscriptions == nil || _subscriptions! != other._subscriptions!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._subscriptions = _subscriptions
      return clone
    }
  }

  private var _storage = _StorageClass()

  struct Extensions {

    static let Comm_Receive_receiveListSubscription = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveListSubscription>, Comm_Receive>(protoFieldNumber: 61, protoFieldName: "RECEIVE_LIST_SUBSCRIPTION", jsonFieldName: "rECEIVELISTSUBSCRIPTION", swiftFieldName: "Comm_ReceiveListSubscription_receiveListSubscription", defaultValue: nil)
  }

  public var subscriptions: Comm_ListSubscription.Reply? {
    get {return _storage._subscriptions}
    set {_uniqueStorage()._subscriptions = newValue}
  }

  public init() {}

  public init(subscriptions: Comm_ListSubscription.Reply? = nil)
  {
    let storage = _uniqueStorage()
    storage._subscriptions = subscriptions
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveListSubscription) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_ReceiveListTransaction: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveListTransaction"}
  public var protoMessageName: String {return "ReceiveListTransaction"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "transactions": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "transactions": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_ReceiveListTransaction
    var unknown = ProtobufUnknownStorage()
    var _transactions: Comm_ListTransaction.Reply? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: Comm_ListTransaction.Reply.self, value: &_transactions)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _transactions {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "transactions", jsonFieldName: "transactions", swiftFieldName: "transactions")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_transactions != nil || other._transactions != nil) && (_transactions == nil || other._transactions == nil || _transactions! != other._transactions!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._transactions = _transactions
      return clone
    }
  }

  private var _storage = _StorageClass()

  struct Extensions {

    static let Comm_Receive_receiveListTransaction = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveListTransaction>, Comm_Receive>(protoFieldNumber: 62, protoFieldName: "RECEIVE_LIST_TRANSACTION", jsonFieldName: "rECEIVELISTTRANSACTION", swiftFieldName: "Comm_ReceiveListTransaction_receiveListTransaction", defaultValue: nil)
  }

  public var transactions: Comm_ListTransaction.Reply? {
    get {return _storage._transactions}
    set {_uniqueStorage()._transactions = newValue}
  }

  public init() {}

  public init(transactions: Comm_ListTransaction.Reply? = nil)
  {
    let storage = _uniqueStorage()
    storage._transactions = transactions
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveListTransaction) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_ReceiveSubscribe: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveSubscribe"}
  public var protoMessageName: String {return "ReceiveSubscribe"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveSubscribe = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveSubscribe>, Comm_Receive>(protoFieldNumber: 63, protoFieldName: "RECEIVE_SUBSCRIBE", jsonFieldName: "rECEIVESUBSCRIBE", swiftFieldName: "Comm_ReceiveSubscribe_receiveSubscribe", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveSubscribe) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ReceiveTopup: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ReceiveTopup"}
  public var protoMessageName: String {return "ReceiveTopup"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    static let Comm_Receive_receiveTopup = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ReceiveTopup>, Comm_Receive>(protoFieldNumber: 64, protoFieldName: "RECEIVE_TOPUP", jsonFieldName: "rECEIVETOPUP", swiftFieldName: "Comm_ReceiveTopup_receiveTopup", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ReceiveTopup) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListSubscription: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListSubscription"}
  public var protoMessageName: String {return "ListSubscription"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct Subscription: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListSubscription.Subscription"}
    public var protoMessageName: String {return "Subscription"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "subId": 1,
      "code": 2,
      "name": 3,
      "serviceName": 4,
      "subDescription": 5,
      "shortDescription": 6,
      "active": 7,
      "sub": 8,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "sub_id": 1,
      "code": 2,
      "name": 3,
      "service_name": 4,
      "sub_description": 5,
      "short_description": 6,
      "active": 7,
      "sub": 8,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var subId: UInt32? = nil

    public var code: String? = nil

    public var name: String? = nil

    public var serviceName: String? = nil

    public var subDescription: String? = nil

    public var shortDescription: String? = nil

    private var _active: Bool? = nil
    public var active: Bool? {
      get {return _active ?? false}
      set {_active = newValue}
    }

    private var _sub: Bool? = nil
    public var sub: Bool? {
      get {return _sub ?? false}
      set {_sub = newValue}
    }

    public init() {}

    public init(subId: UInt32? = nil,
      code: String? = nil,
      name: String? = nil,
      serviceName: String? = nil,
      subDescription: String? = nil,
      shortDescription: String? = nil,
      active: Bool? = nil,
      sub: Bool? = nil)
    {
      self.subId = subId
      self.code = code
      self.name = name
      self.serviceName = serviceName
      self.subDescription = subDescription
      self.shortDescription = shortDescription
      self.active = active
      self.sub = sub
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &subId)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &code)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
      case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &serviceName)
      case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &subDescription)
      case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &shortDescription)
      case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &active)
      case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &sub)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = subId {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "sub_id", jsonFieldName: "subId", swiftFieldName: "subId")
      }
      if let v = code {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "code", jsonFieldName: "code", swiftFieldName: "code")
      }
      if let v = name {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      }
      if let v = serviceName {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "service_name", jsonFieldName: "serviceName", swiftFieldName: "serviceName")
      }
      if let v = subDescription {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "sub_description", jsonFieldName: "subDescription", swiftFieldName: "subDescription")
      }
      if let v = shortDescription {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "short_description", jsonFieldName: "shortDescription", swiftFieldName: "shortDescription")
      }
      if let v = active {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 7, protoFieldName: "active", jsonFieldName: "active", swiftFieldName: "active")
      }
      if let v = sub {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 8, protoFieldName: "sub", jsonFieldName: "sub", swiftFieldName: "sub")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListSubscription.Subscription) -> Bool {
      if ((subId != nil || other.subId != nil) && (subId == nil || other.subId == nil || subId! != other.subId!)) {return false}
      if ((code != nil || other.code != nil) && (code == nil || other.code == nil || code! != other.code!)) {return false}
      if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
      if ((serviceName != nil || other.serviceName != nil) && (serviceName == nil || other.serviceName == nil || serviceName! != other.serviceName!)) {return false}
      if ((subDescription != nil || other.subDescription != nil) && (subDescription == nil || other.subDescription == nil || subDescription! != other.subDescription!)) {return false}
      if ((shortDescription != nil || other.shortDescription != nil) && (shortDescription == nil || other.shortDescription == nil || shortDescription! != other.shortDescription!)) {return false}
      if (((active != nil && active! != false) || (other.active != nil && other.active! != false)) && (active == nil || other.active == nil || active! != other.active!)) {return false}
      if (((sub != nil && sub! != false) || (other.sub != nil && other.sub! != false)) && (sub == nil || other.sub == nil || sub! != other.sub!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListSubscription.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListSubscription.Request) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListSubscription.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "subscriptions": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "subscriptions": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var subscriptions: [Comm_ListSubscription.Subscription] = []

    public init() {}

    public init(subscriptions: [Comm_ListSubscription.Subscription] = [])
    {
      if !subscriptions.isEmpty {
        self.subscriptions = subscriptions
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_ListSubscription.Subscription.self, value: &subscriptions)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !subscriptions.isEmpty {
        try visitor.visitRepeatedMessageField(value: subscriptions, protoFieldNumber: 1, protoFieldName: "subscriptions", jsonFieldName: "subscriptions", swiftFieldName: "subscriptions")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListSubscription.Reply) -> Bool {
      if subscriptions != other.subscriptions {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListSubscription.Reply>, Comm_Reply>(protoFieldNumber: 240, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListSubscription_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListSubscription) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ListTransaction: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ListTransaction"}
  public var protoMessageName: String {return "ListTransaction"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case scTopup // = 0
    case minus // = 1
    case tkc // = 2
    case dbTopup // = 3

    public init() {
      self = .scTopup
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .scTopup
      case 1: self = .minus
      case 2: self = .tkc
      case 3: self = .dbTopup
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "scTopup": self = .scTopup
      case "minus": self = .minus
      case "tkc": self = .tkc
      case "dbTopup": self = .dbTopup
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "SC_TOPUP": self = .scTopup
      case "MINUS": self = .minus
      case "TKC": self = .tkc
      case "DB_TOPUP": self = .dbTopup
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "SC_TOPUP": self = .scTopup
      case "MINUS": self = .minus
      case "TKC": self = .tkc
      case "DB_TOPUP": self = .dbTopup
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .scTopup: return 0
        case .minus: return 1
        case .tkc: return 2
        case .dbTopup: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .scTopup: return "\"SC_TOPUP\""
        case .minus: return "\"MINUS\""
        case .tkc: return "\"TKC\""
        case .dbTopup: return "\"DB_TOPUP\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .scTopup: return ".scTopup"
        case .minus: return ".minus"
        case .tkc: return ".tkc"
        case .dbTopup: return ".dbTopup"
        }
      }
    }

  }

  public enum Status: ProtobufEnum {
    public typealias RawValue = Int
    case success // = 0
    case fail // = 1

    public init() {
      self = .success
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .success
      case 1: self = .fail
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "success": self = .success
      case "fail": self = .fail
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "SUCCESS": self = .success
      case "FAIL": self = .fail
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "SUCCESS": self = .success
      case "FAIL": self = .fail
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .success: return 0
        case .fail: return 1
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .success: return "\"SUCCESS\""
        case .fail: return "\"FAIL\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .success: return ".success"
        case .fail: return ".fail"
        }
      }
    }

  }

  public struct Transaction: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListTransaction.Transaction"}
    public var protoMessageName: String {return "Transaction"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "amount": 1,
      "createdTime": 2,
      "type": 3,
      "status": 4,
      "note": 5,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "amount": 1,
      "created_time": 2,
      "type": 3,
      "status": 4,
      "note": 5,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var amount: Double? = nil

    public var createdTime: UInt64? = nil

    public var type: UInt32? = nil

    public var status: UInt32? = nil

    public var note: String? = nil

    public init() {}

    public init(amount: Double? = nil,
      createdTime: UInt64? = nil,
      type: UInt32? = nil,
      status: UInt32? = nil,
      note: String? = nil)
    {
      self.amount = amount
      self.createdTime = createdTime
      self.type = type
      self.status = status
      self.note = note
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufDouble.self, value: &amount)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &createdTime)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &type)
      case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &status)
      case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &note)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = amount {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 1, protoFieldName: "amount", jsonFieldName: "amount", swiftFieldName: "amount")
      }
      if let v = createdTime {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "created_time", jsonFieldName: "createdTime", swiftFieldName: "createdTime")
      }
      if let v = type {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 3, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      }
      if let v = status {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 4, protoFieldName: "status", jsonFieldName: "status", swiftFieldName: "status")
      }
      if let v = note {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "note", jsonFieldName: "note", swiftFieldName: "note")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListTransaction.Transaction) -> Bool {
      if ((amount != nil || other.amount != nil) && (amount == nil || other.amount == nil || amount! != other.amount!)) {return false}
      if ((createdTime != nil || other.createdTime != nil) && (createdTime == nil || other.createdTime == nil || createdTime! != other.createdTime!)) {return false}
      if ((type != nil || other.type != nil) && (type == nil || other.type == nil || type! != other.type!)) {return false}
      if ((status != nil || other.status != nil) && (status == nil || other.status == nil || status! != other.status!)) {return false}
      if ((note != nil || other.note != nil) && (note == nil || other.note == nil || note! != other.note!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListTransaction.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "fromIndex": 1,
      "toIndex": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "from_index": 1,
      "to_index": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var fromIndex: UInt32 = 0

    public var toIndex: UInt32 = 0

    public init() {}

    public init(fromIndex: UInt32 = 0,
      toIndex: UInt32 = 0)
    {
      self.fromIndex = fromIndex
      self.toIndex = toIndex
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &fromIndex)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &toIndex)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: fromIndex, protoFieldNumber: 1, protoFieldName: "from_index", jsonFieldName: "fromIndex", swiftFieldName: "fromIndex")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: toIndex, protoFieldNumber: 2, protoFieldName: "to_index", jsonFieldName: "toIndex", swiftFieldName: "toIndex")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListTransaction.Request) -> Bool {
      if fromIndex != other.fromIndex {return false}
      if toIndex != other.toIndex {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ListTransaction.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "transactions": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "transactions": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var transactions: [Comm_ListTransaction.Transaction] = []

    public init() {}

    public init(transactions: [Comm_ListTransaction.Transaction] = [])
    {
      if !transactions.isEmpty {
        self.transactions = transactions
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_ListTransaction.Transaction.self, value: &transactions)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !transactions.isEmpty {
        try visitor.visitRepeatedMessageField(value: transactions, protoFieldNumber: 1, protoFieldName: "transactions", jsonFieldName: "transactions", swiftFieldName: "transactions")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ListTransaction.Reply) -> Bool {
      if transactions != other.transactions {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_ListTransaction.Reply>, Comm_Reply>(protoFieldNumber: 241, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_ListTransaction_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ListTransaction) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Subscribe: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Subscribe"}
  public var protoMessageName: String {return "Subscribe"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case regis // = 1
    case cancel // = 2

    public init() {
      self = .regis
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .regis
      case 2: self = .cancel
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "regis": self = .regis
      case "cancel": self = .cancel
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "REGIS": self = .regis
      case "CANCEL": self = .cancel
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "REGIS": self = .regis
      case "CANCEL": self = .cancel
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .regis: return 1
        case .cancel: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .regis: return "\"REGIS\""
        case .cancel: return "\"CANCEL\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .regis: return ".regis"
        case .cancel: return ".cancel"
        }
      }
    }

  }

  public enum Error: ProtobufEnum {
    public typealias RawValue = Int
    case money // = 1
    case server // = 2

    public init() {
      self = .money
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .money
      case 2: self = .server
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "money": self = .money
      case "server": self = .server
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ERROR_MONEY": self = .money
      case "ERROR_SERVER": self = .server
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ERROR_MONEY": self = .money
      case "ERROR_SERVER": self = .server
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .money: return 1
        case .server: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .money: return "\"ERROR_MONEY\""
        case .server: return "\"ERROR_SERVER\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .money: return ".money"
        case .server: return ".server"
        }
      }
    }

  }

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_Subscribe.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "type": 1,
      "serviceId": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "type": 1,
      "service_id": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var type: UInt32 = 0

    public var serviceId: UInt32 = 0

    public init() {}

    public init(type: UInt32 = 0,
      serviceId: UInt32 = 0)
    {
      self.type = type
      self.serviceId = serviceId
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &serviceId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: serviceId, protoFieldNumber: 2, protoFieldName: "service_id", jsonFieldName: "serviceId", swiftFieldName: "serviceId")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_Subscribe.Request) -> Bool {
      if type != other.type {return false}
      if serviceId != other.serviceId {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_Subscribe.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_Subscribe.Reply) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_Subscribe.Reply>, Comm_Reply>(protoFieldNumber: 242, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_Subscribe_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Subscribe) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Topup: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Topup"}
  public var protoMessageName: String {return "Topup"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case sc // = 0
    case db // = 1

    public init() {
      self = .sc
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sc
      case 1: self = .db
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "sc": self = .sc
      case "db": self = .db
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "SC": self = .sc
      case "DB": self = .db
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "SC": self = .sc
      case "DB": self = .db
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .sc: return 0
        case .db: return 1
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .sc: return "\"SC\""
        case .db: return "\"DB\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .sc: return ".sc"
        case .db: return ".db"
        }
      }
    }

  }

  public enum Error: ProtobufEnum {
    public typealias RawValue = Int
    case vtError // = 1
    case unauthorized // = 3
    case accountNotfound // = 201
    case notEnoughMoney // = 202
    case nokUsedCard // = 301
    case nokExpiredCard // = 302
    case nokInactivatedCard // = 303
    case nokInvalidSerial // = 304
    case nokInvalidCard // = 305

    public init() {
      self = .vtError
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .vtError
      case 3: self = .unauthorized
      case 201: self = .accountNotfound
      case 202: self = .notEnoughMoney
      case 301: self = .nokUsedCard
      case 302: self = .nokExpiredCard
      case 303: self = .nokInactivatedCard
      case 304: self = .nokInvalidSerial
      case 305: self = .nokInvalidCard
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "vtError": self = .vtError
      case "unauthorized": self = .unauthorized
      case "accountNotfound": self = .accountNotfound
      case "notEnoughMoney": self = .notEnoughMoney
      case "nokUsedCard": self = .nokUsedCard
      case "nokExpiredCard": self = .nokExpiredCard
      case "nokInactivatedCard": self = .nokInactivatedCard
      case "nokInvalidSerial": self = .nokInvalidSerial
      case "nokInvalidCard": self = .nokInvalidCard
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "VT_ERROR": self = .vtError
      case "UNAUTHORIZED": self = .unauthorized
      case "ACCOUNT_NOTFOUND": self = .accountNotfound
      case "NOT_ENOUGH_MONEY": self = .notEnoughMoney
      case "NOK_USED_CARD": self = .nokUsedCard
      case "NOK_EXPIRED_CARD": self = .nokExpiredCard
      case "NOK_INACTIVATED_CARD": self = .nokInactivatedCard
      case "NOK_INVALID_SERIAL": self = .nokInvalidSerial
      case "NOK_INVALID_CARD": self = .nokInvalidCard
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "VT_ERROR": self = .vtError
      case "UNAUTHORIZED": self = .unauthorized
      case "ACCOUNT_NOTFOUND": self = .accountNotfound
      case "NOT_ENOUGH_MONEY": self = .notEnoughMoney
      case "NOK_USED_CARD": self = .nokUsedCard
      case "NOK_EXPIRED_CARD": self = .nokExpiredCard
      case "NOK_INACTIVATED_CARD": self = .nokInactivatedCard
      case "NOK_INVALID_SERIAL": self = .nokInvalidSerial
      case "NOK_INVALID_CARD": self = .nokInvalidCard
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .vtError: return 1
        case .unauthorized: return 3
        case .accountNotfound: return 201
        case .notEnoughMoney: return 202
        case .nokUsedCard: return 301
        case .nokExpiredCard: return 302
        case .nokInactivatedCard: return 303
        case .nokInvalidSerial: return 304
        case .nokInvalidCard: return 305
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .vtError: return "\"VT_ERROR\""
        case .unauthorized: return "\"UNAUTHORIZED\""
        case .accountNotfound: return "\"ACCOUNT_NOTFOUND\""
        case .notEnoughMoney: return "\"NOT_ENOUGH_MONEY\""
        case .nokUsedCard: return "\"NOK_USED_CARD\""
        case .nokExpiredCard: return "\"NOK_EXPIRED_CARD\""
        case .nokInactivatedCard: return "\"NOK_INACTIVATED_CARD\""
        case .nokInvalidSerial: return "\"NOK_INVALID_SERIAL\""
        case .nokInvalidCard: return "\"NOK_INVALID_CARD\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .vtError: return ".vtError"
        case .unauthorized: return ".unauthorized"
        case .accountNotfound: return ".accountNotfound"
        case .notEnoughMoney: return ".notEnoughMoney"
        case .nokUsedCard: return ".nokUsedCard"
        case .nokExpiredCard: return ".nokExpiredCard"
        case .nokInactivatedCard: return ".nokInactivatedCard"
        case .nokInvalidSerial: return ".nokInvalidSerial"
        case .nokInvalidCard: return ".nokInvalidCard"
        }
      }
    }

  }

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_Topup.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "type": 1,
      "serial": 2,
      "pin": 3,
      "price": 4,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "type": 1,
      "serial": 2,
      "pin": 3,
      "price": 4,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var type: UInt32 = 0

    public var serial: String? = nil

    public var pin: String? = nil

    public var price: UInt64? = nil

    public init() {}

    public init(type: UInt32 = 0,
      serial: String? = nil,
      pin: String? = nil,
      price: UInt64? = nil)
    {
      self.type = type
      self.serial = serial
      self.pin = pin
      self.price = price
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &serial)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &pin)
      case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &price)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      if let v = serial {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "serial", jsonFieldName: "serial", swiftFieldName: "serial")
      }
      if let v = pin {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "pin", jsonFieldName: "pin", swiftFieldName: "pin")
      }
      if let v = price {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 4, protoFieldName: "price", jsonFieldName: "price", swiftFieldName: "price")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_Topup.Request) -> Bool {
      if type != other.type {return false}
      if ((serial != nil || other.serial != nil) && (serial == nil || other.serial == nil || serial! != other.serial!)) {return false}
      if ((pin != nil || other.pin != nil) && (pin == nil || other.pin == nil || pin! != other.pin!)) {return false}
      if ((price != nil || other.price != nil) && (price == nil || other.price == nil || price! != other.price!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_Topup.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_Topup.Reply) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_Topup.Reply>, Comm_Reply>(protoFieldNumber: 243, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_Topup_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Topup) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_GetAccount: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_GetAccount"}
  public var protoMessageName: String {return "GetAccount"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public enum Error: ProtobufEnum {
    public typealias RawValue = Int
    case vtError // = 1

    public init() {
      self = .vtError
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .vtError
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "vtError": self = .vtError
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "VT_ERROR": self = .vtError
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "VT_ERROR": self = .vtError
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .vtError: return 1
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .vtError: return "\"VT_ERROR\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .vtError: return ".vtError"
        }
      }
    }

  }

  public struct CurrentService: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_GetAccount.CurrentService"}
    public var protoMessageName: String {return "CurrentService"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "subId": 1,
      "subCode": 2,
      "subName": 3,
      "serviceName": 4,
      "accountDescription": 5,
      "shortDescription": 6,
      "sub": 7,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "sub_id": 1,
      "sub_code": 2,
      "sub_name": 3,
      "service_name": 4,
      "account_description": 5,
      "short_description": 6,
      "sub": 7,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var subId: UInt32? = nil

    public var subCode: String? = nil

    public var subName: String? = nil

    public var serviceName: String? = nil

    public var accountDescription: String? = nil

    public var shortDescription: String? = nil

    private var _sub: Bool? = nil
    public var sub: Bool? {
      get {return _sub ?? false}
      set {_sub = newValue}
    }

    public init() {}

    public init(subId: UInt32? = nil,
      subCode: String? = nil,
      subName: String? = nil,
      serviceName: String? = nil,
      accountDescription: String? = nil,
      shortDescription: String? = nil,
      sub: Bool? = nil)
    {
      self.subId = subId
      self.subCode = subCode
      self.subName = subName
      self.serviceName = serviceName
      self.accountDescription = accountDescription
      self.shortDescription = shortDescription
      self.sub = sub
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &subId)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &subCode)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &subName)
      case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &serviceName)
      case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &accountDescription)
      case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &shortDescription)
      case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &sub)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = subId {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "sub_id", jsonFieldName: "subId", swiftFieldName: "subId")
      }
      if let v = subCode {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "sub_code", jsonFieldName: "subCode", swiftFieldName: "subCode")
      }
      if let v = subName {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "sub_name", jsonFieldName: "subName", swiftFieldName: "subName")
      }
      if let v = serviceName {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "service_name", jsonFieldName: "serviceName", swiftFieldName: "serviceName")
      }
      if let v = accountDescription {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "account_description", jsonFieldName: "accountDescription", swiftFieldName: "accountDescription")
      }
      if let v = shortDescription {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "short_description", jsonFieldName: "shortDescription", swiftFieldName: "shortDescription")
      }
      if let v = sub {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 7, protoFieldName: "sub", jsonFieldName: "sub", swiftFieldName: "sub")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_GetAccount.CurrentService) -> Bool {
      if ((subId != nil || other.subId != nil) && (subId == nil || other.subId == nil || subId! != other.subId!)) {return false}
      if ((subCode != nil || other.subCode != nil) && (subCode == nil || other.subCode == nil || subCode! != other.subCode!)) {return false}
      if ((subName != nil || other.subName != nil) && (subName == nil || other.subName == nil || subName! != other.subName!)) {return false}
      if ((serviceName != nil || other.serviceName != nil) && (serviceName == nil || other.serviceName == nil || serviceName! != other.serviceName!)) {return false}
      if ((accountDescription != nil || other.accountDescription != nil) && (accountDescription == nil || other.accountDescription == nil || accountDescription! != other.accountDescription!)) {return false}
      if ((shortDescription != nil || other.shortDescription != nil) && (shortDescription == nil || other.shortDescription == nil || shortDescription! != other.shortDescription!)) {return false}
      if (((sub != nil && sub! != false) || (other.sub != nil && other.sub! != false)) && (sub == nil || other.sub == nil || sub! != other.sub!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Request: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_GetAccount.Request"}
    public var protoMessageName: String {return "Request"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [:]}
    public var protoFieldNames: [String: Int] {return [:]}

    var unknown = ProtobufUnknownStorage()

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try unknown.decodeField(setter: &setter)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_GetAccount.Request) -> Bool {
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Reply: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_GetAccount.Reply"}
    public var protoMessageName: String {return "Reply"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "credit": 1,
      "freeInternalSms": 2,
      "freeInternalCall": 3,
      "freeExternalSms": 4,
      "freeExternalCall": 5,
      "freeMixSms": 6,
      "freeMixCall": 7,
      "subActiveCode": 8,
      "subStartDate": 9,
      "subEndDate": 10,
      "subStatus": 11,
      "currentService": 12,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "credit": 1,
      "free_internal_sms": 2,
      "free_internal_call": 3,
      "free_external_sms": 4,
      "free_external_call": 5,
      "free_mix_sms": 6,
      "free_mix_call": 7,
      "sub_active_code": 8,
      "sub_start_date": 9,
      "sub_end_date": 10,
      "sub_status": 11,
      "current_service": 12,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Comm_GetAccount.Reply
      var unknown = ProtobufUnknownStorage()
      var _credit: Double? = nil
      var _freeInternalSms: UInt32? = nil
      var _freeInternalCall: UInt32? = nil
      var _freeExternalSms: UInt32? = nil
      var _freeExternalCall: UInt32? = nil
      var _freeMixSms: UInt32? = nil
      var _freeMixCall: UInt32? = nil
      var _subActiveCode: UInt32? = nil
      var _subStartDate: UInt64? = nil
      var _subEndDate: UInt64? = nil
      var _subStatus: UInt32? = nil
      var _currentService: Comm_GetAccount.CurrentService? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufDouble.self, value: &_credit)
        case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_freeInternalSms)
        case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_freeInternalCall)
        case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_freeExternalSms)
        case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_freeExternalCall)
        case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_freeMixSms)
        case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_freeMixCall)
        case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_subActiveCode)
        case 9: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &_subStartDate)
        case 10: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &_subEndDate)
        case 11: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_subStatus)
        case 12: handled = try setter.decodeOptionalMessageField(fieldType: Comm_GetAccount.CurrentService.self, value: &_currentService)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _credit {
          try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 1, protoFieldName: "credit", jsonFieldName: "credit", swiftFieldName: "credit")
        }
        if let v = _freeInternalSms {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "free_internal_sms", jsonFieldName: "freeInternalSms", swiftFieldName: "freeInternalSms")
        }
        if let v = _freeInternalCall {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 3, protoFieldName: "free_internal_call", jsonFieldName: "freeInternalCall", swiftFieldName: "freeInternalCall")
        }
        if let v = _freeExternalSms {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 4, protoFieldName: "free_external_sms", jsonFieldName: "freeExternalSms", swiftFieldName: "freeExternalSms")
        }
        if let v = _freeExternalCall {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "free_external_call", jsonFieldName: "freeExternalCall", swiftFieldName: "freeExternalCall")
        }
        if let v = _freeMixSms {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 6, protoFieldName: "free_mix_sms", jsonFieldName: "freeMixSms", swiftFieldName: "freeMixSms")
        }
        if let v = _freeMixCall {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 7, protoFieldName: "free_mix_call", jsonFieldName: "freeMixCall", swiftFieldName: "freeMixCall")
        }
        if let v = _subActiveCode {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 8, protoFieldName: "sub_active_code", jsonFieldName: "subActiveCode", swiftFieldName: "subActiveCode")
        }
        if let v = _subStartDate {
          try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 9, protoFieldName: "sub_start_date", jsonFieldName: "subStartDate", swiftFieldName: "subStartDate")
        }
        if let v = _subEndDate {
          try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 10, protoFieldName: "sub_end_date", jsonFieldName: "subEndDate", swiftFieldName: "subEndDate")
        }
        if let v = _subStatus {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 11, protoFieldName: "sub_status", jsonFieldName: "subStatus", swiftFieldName: "subStatus")
        }
        if let v = _currentService {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 12, protoFieldName: "current_service", jsonFieldName: "currentService", swiftFieldName: "currentService")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if ((_credit != nil || other._credit != nil) && (_credit == nil || other._credit == nil || _credit! != other._credit!)) {return false}
        if ((_freeInternalSms != nil || other._freeInternalSms != nil) && (_freeInternalSms == nil || other._freeInternalSms == nil || _freeInternalSms! != other._freeInternalSms!)) {return false}
        if ((_freeInternalCall != nil || other._freeInternalCall != nil) && (_freeInternalCall == nil || other._freeInternalCall == nil || _freeInternalCall! != other._freeInternalCall!)) {return false}
        if ((_freeExternalSms != nil || other._freeExternalSms != nil) && (_freeExternalSms == nil || other._freeExternalSms == nil || _freeExternalSms! != other._freeExternalSms!)) {return false}
        if ((_freeExternalCall != nil || other._freeExternalCall != nil) && (_freeExternalCall == nil || other._freeExternalCall == nil || _freeExternalCall! != other._freeExternalCall!)) {return false}
        if ((_freeMixSms != nil || other._freeMixSms != nil) && (_freeMixSms == nil || other._freeMixSms == nil || _freeMixSms! != other._freeMixSms!)) {return false}
        if ((_freeMixCall != nil || other._freeMixCall != nil) && (_freeMixCall == nil || other._freeMixCall == nil || _freeMixCall! != other._freeMixCall!)) {return false}
        if ((_subActiveCode != nil || other._subActiveCode != nil) && (_subActiveCode == nil || other._subActiveCode == nil || _subActiveCode! != other._subActiveCode!)) {return false}
        if ((_subStartDate != nil || other._subStartDate != nil) && (_subStartDate == nil || other._subStartDate == nil || _subStartDate! != other._subStartDate!)) {return false}
        if ((_subEndDate != nil || other._subEndDate != nil) && (_subEndDate == nil || other._subEndDate == nil || _subEndDate! != other._subEndDate!)) {return false}
        if ((_subStatus != nil || other._subStatus != nil) && (_subStatus == nil || other._subStatus == nil || _subStatus! != other._subStatus!)) {return false}
        if ((_currentService != nil || other._currentService != nil) && (_currentService == nil || other._currentService == nil || _currentService! != other._currentService!)) {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._credit = _credit
        clone._freeInternalSms = _freeInternalSms
        clone._freeInternalCall = _freeInternalCall
        clone._freeExternalSms = _freeExternalSms
        clone._freeExternalCall = _freeExternalCall
        clone._freeMixSms = _freeMixSms
        clone._freeMixCall = _freeMixCall
        clone._subActiveCode = _subActiveCode
        clone._subStartDate = _subStartDate
        clone._subEndDate = _subEndDate
        clone._subStatus = _subStatus
        clone._currentService = _currentService
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var credit: Double? {
      get {return _storage._credit}
      set {_uniqueStorage()._credit = newValue}
    }

    public var freeInternalSms: UInt32? {
      get {return _storage._freeInternalSms}
      set {_uniqueStorage()._freeInternalSms = newValue}
    }

    public var freeInternalCall: UInt32? {
      get {return _storage._freeInternalCall}
      set {_uniqueStorage()._freeInternalCall = newValue}
    }

    public var freeExternalSms: UInt32? {
      get {return _storage._freeExternalSms}
      set {_uniqueStorage()._freeExternalSms = newValue}
    }

    public var freeExternalCall: UInt32? {
      get {return _storage._freeExternalCall}
      set {_uniqueStorage()._freeExternalCall = newValue}
    }

    public var freeMixSms: UInt32? {
      get {return _storage._freeMixSms}
      set {_uniqueStorage()._freeMixSms = newValue}
    }

    public var freeMixCall: UInt32? {
      get {return _storage._freeMixCall}
      set {_uniqueStorage()._freeMixCall = newValue}
    }

    public var subActiveCode: UInt32? {
      get {return _storage._subActiveCode}
      set {_uniqueStorage()._subActiveCode = newValue}
    }

    public var subStartDate: UInt64? {
      get {return _storage._subStartDate}
      set {_uniqueStorage()._subStartDate = newValue}
    }

    public var subEndDate: UInt64? {
      get {return _storage._subEndDate}
      set {_uniqueStorage()._subEndDate = newValue}
    }

    public var subStatus: UInt32? {
      get {return _storage._subStatus}
      set {_uniqueStorage()._subStatus = newValue}
    }

    public var currentService: Comm_GetAccount.CurrentService? {
      get {return _storage._currentService}
      set {_uniqueStorage()._currentService = newValue}
    }

    public init() {}

    public init(credit: Double? = nil,
      freeInternalSms: UInt32? = nil,
      freeInternalCall: UInt32? = nil,
      freeExternalSms: UInt32? = nil,
      freeExternalCall: UInt32? = nil,
      freeMixSms: UInt32? = nil,
      freeMixCall: UInt32? = nil,
      subActiveCode: UInt32? = nil,
      subStartDate: UInt64? = nil,
      subEndDate: UInt64? = nil,
      subStatus: UInt32? = nil,
      currentService: Comm_GetAccount.CurrentService? = nil)
    {
      let storage = _uniqueStorage()
      storage._credit = credit
      storage._freeInternalSms = freeInternalSms
      storage._freeInternalCall = freeInternalCall
      storage._freeExternalSms = freeExternalSms
      storage._freeExternalCall = freeExternalCall
      storage._freeMixSms = freeMixSms
      storage._freeMixCall = freeMixCall
      storage._subActiveCode = subActiveCode
      storage._subStartDate = subStartDate
      storage._subEndDate = subEndDate
      storage._subStatus = subStatus
      storage._currentService = currentService
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_GetAccount.Reply) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let Comm_Reply_id = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<Comm_GetAccount.Reply>, Comm_Reply>(protoFieldNumber: 244, protoFieldName: "ID", jsonFieldName: "iD", swiftFieldName: "Comm_GetAccount_id", defaultValue: nil)
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_GetAccount) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

extension Comm_Receive {
  public var Comm_ReceiveGetAccount_receiveGetAccount: Comm_ReceiveGetAccount? {
    get {return getExtensionValue(ext: Comm_ReceiveGetAccount.Extensions.Comm_Receive_receiveGetAccount)}
    set {setExtensionValue(ext: Comm_ReceiveGetAccount.Extensions.Comm_Receive_receiveGetAccount, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveListSubscription_receiveListSubscription: Comm_ReceiveListSubscription? {
    get {return getExtensionValue(ext: Comm_ReceiveListSubscription.Extensions.Comm_Receive_receiveListSubscription)}
    set {setExtensionValue(ext: Comm_ReceiveListSubscription.Extensions.Comm_Receive_receiveListSubscription, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveListTransaction_receiveListTransaction: Comm_ReceiveListTransaction? {
    get {return getExtensionValue(ext: Comm_ReceiveListTransaction.Extensions.Comm_Receive_receiveListTransaction)}
    set {setExtensionValue(ext: Comm_ReceiveListTransaction.Extensions.Comm_Receive_receiveListTransaction, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveSubscribe_receiveSubscribe: Comm_ReceiveSubscribe? {
    get {return getExtensionValue(ext: Comm_ReceiveSubscribe.Extensions.Comm_Receive_receiveSubscribe)}
    set {setExtensionValue(ext: Comm_ReceiveSubscribe.Extensions.Comm_Receive_receiveSubscribe, value: newValue)}
  }
}

extension Comm_Receive {
  public var Comm_ReceiveTopup_receiveTopup: Comm_ReceiveTopup? {
    get {return getExtensionValue(ext: Comm_ReceiveTopup.Extensions.Comm_Receive_receiveTopup)}
    set {setExtensionValue(ext: Comm_ReceiveTopup.Extensions.Comm_Receive_receiveTopup, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListSubscription_id: Comm_ListSubscription.Reply? {
    get {return getExtensionValue(ext: Comm_ListSubscription.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListSubscription.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_ListTransaction_id: Comm_ListTransaction.Reply? {
    get {return getExtensionValue(ext: Comm_ListTransaction.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_ListTransaction.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_Subscribe_id: Comm_Subscribe.Reply? {
    get {return getExtensionValue(ext: Comm_Subscribe.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_Subscribe.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_Topup_id: Comm_Topup.Reply? {
    get {return getExtensionValue(ext: Comm_Topup.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_Topup.Extensions.Comm_Reply_id, value: newValue)}
  }
}

extension Comm_Reply {
  public var Comm_GetAccount_id: Comm_GetAccount.Reply? {
    get {return getExtensionValue(ext: Comm_GetAccount.Extensions.Comm_Reply_id)}
    set {setExtensionValue(ext: Comm_GetAccount.Extensions.Comm_Reply_id, value: newValue)}
  }
}

public let Comm_CommAccount_Extensions: ProtobufExtensionSet = [
  Comm_ReceiveGetAccount.Extensions.Comm_Receive_receiveGetAccount,
  Comm_ReceiveListSubscription.Extensions.Comm_Receive_receiveListSubscription,
  Comm_ReceiveListTransaction.Extensions.Comm_Receive_receiveListTransaction,
  Comm_ReceiveSubscribe.Extensions.Comm_Receive_receiveSubscribe,
  Comm_ReceiveTopup.Extensions.Comm_Receive_receiveTopup,
  Comm_ListSubscription.Extensions.Comm_Reply_id,
  Comm_ListTransaction.Extensions.Comm_Reply_id,
  Comm_Subscribe.Extensions.Comm_Reply_id,
  Comm_Topup.Extensions.Comm_Reply_id,
  Comm_GetAccount.Extensions.Comm_Reply_id
]
