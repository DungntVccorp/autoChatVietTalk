/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: comm.model.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Comm_ResultType: ProtobufEnum {
  public typealias RawValue = Int
  case ok // = 0
  case requestInvalid // = 1000
  case sessionInvalid // = 1001
  case sessionExpire // = 1002
  case sizeLimited // = 1003
  case dbError // = 1004
  case noChanged // = 1005
  case networkError // = 1006
  case dataError // = 1007
  case telInvalid // = 1008

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1000: self = .requestInvalid
    case 1001: self = .sessionInvalid
    case 1002: self = .sessionExpire
    case 1003: self = .sizeLimited
    case 1004: self = .dbError
    case 1005: self = .noChanged
    case 1006: self = .networkError
    case 1007: self = .dataError
    case 1008: self = .telInvalid
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "ok": self = .ok
    case "requestInvalid": self = .requestInvalid
    case "sessionInvalid": self = .sessionInvalid
    case "sessionExpire": self = .sessionExpire
    case "sizeLimited": self = .sizeLimited
    case "dbError": self = .dbError
    case "noChanged": self = .noChanged
    case "networkError": self = .networkError
    case "dataError": self = .dataError
    case "telInvalid": self = .telInvalid
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "OK": self = .ok
    case "REQUEST_INVALID": self = .requestInvalid
    case "SESSION_INVALID": self = .sessionInvalid
    case "SESSION_EXPIRE": self = .sessionExpire
    case "SIZE_LIMITED": self = .sizeLimited
    case "DB_ERROR": self = .dbError
    case "NO_CHANGED": self = .noChanged
    case "NETWORK_ERROR": self = .networkError
    case "DATA_ERROR": self = .dataError
    case "TEL_INVALID": self = .telInvalid
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "OK": self = .ok
    case "REQUEST_INVALID": self = .requestInvalid
    case "SESSION_INVALID": self = .sessionInvalid
    case "SESSION_EXPIRE": self = .sessionExpire
    case "SIZE_LIMITED": self = .sizeLimited
    case "DB_ERROR": self = .dbError
    case "NO_CHANGED": self = .noChanged
    case "NETWORK_ERROR": self = .networkError
    case "DATA_ERROR": self = .dataError
    case "TEL_INVALID": self = .telInvalid
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .ok: return 0
      case .requestInvalid: return 1000
      case .sessionInvalid: return 1001
      case .sessionExpire: return 1002
      case .sizeLimited: return 1003
      case .dbError: return 1004
      case .noChanged: return 1005
      case .networkError: return 1006
      case .dataError: return 1007
      case .telInvalid: return 1008
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .ok: return "\"OK\""
      case .requestInvalid: return "\"REQUEST_INVALID\""
      case .sessionInvalid: return "\"SESSION_INVALID\""
      case .sessionExpire: return "\"SESSION_EXPIRE\""
      case .sizeLimited: return "\"SIZE_LIMITED\""
      case .dbError: return "\"DB_ERROR\""
      case .noChanged: return "\"NO_CHANGED\""
      case .networkError: return "\"NETWORK_ERROR\""
      case .dataError: return "\"DATA_ERROR\""
      case .telInvalid: return "\"TEL_INVALID\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .ok: return ".ok"
      case .requestInvalid: return ".requestInvalid"
      case .sessionInvalid: return ".sessionInvalid"
      case .sessionExpire: return ".sessionExpire"
      case .sizeLimited: return ".sizeLimited"
      case .dbError: return ".dbError"
      case .noChanged: return ".noChanged"
      case .networkError: return ".networkError"
      case .dataError: return ".dataError"
      case .telInvalid: return ".telInvalid"
      }
    }
  }

}

public struct Comm_Reply: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "Comm_Reply"}
  public var protoMessageName: String {return "Reply"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "type": 1,
    "presences": 2,
    "time": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "type": 1,
    "presences": 2,
    "time": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var type: UInt32 = 0

  public var presences: [Comm_Presence] = []

  public var time: UInt64? = nil

  public init() {}

  public init(type: UInt32 = 0,
    presences: [Comm_Presence] = [],
    time: UInt64? = nil)
  {
    self.type = type
    if !presences.isEmpty {
      self.presences = presences
    }
    self.time = time
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
    case 2: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Presence.self, value: &presences)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &time)
    default:
      if (4 <= protoFieldNumber && protoFieldNumber < 536870912) {
        handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: Comm_Reply.self, protoFieldNumber: protoFieldNumber)
      } else {
        handled = false
      }
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    if !presences.isEmpty {
      try visitor.visitRepeatedMessageField(value: presences, protoFieldNumber: 2, protoFieldName: "presences", jsonFieldName: "presences", swiftFieldName: "presences")
    }
    if let v = time {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 3, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
    }
    try extensionFieldValues.traverse(visitor: &visitor, start: 4, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Reply) -> Bool {
    if type != other.type {return false}
    if presences != other.presences {return false}
    if ((time != nil || other.time != nil) && (time == nil || other.time == nil || time! != other.time!)) {return false}
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, Comm_Reply>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, Comm_Reply>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }
}

public struct Comm_Receive: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "Comm_Receive"}
  public var protoMessageName: String {return "Receive"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "time": 1,
    "deviceToken": 2,
    "deviceTokenVoip": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "time": 1,
    "device_token": 2,
    "device_token_voip": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var time: UInt64? = nil

  public var deviceToken: String? = nil

  public var deviceTokenVoip: String? = nil

  public init() {}

  public init(time: UInt64? = nil,
    deviceToken: String? = nil,
    deviceTokenVoip: String? = nil)
  {
    self.time = time
    self.deviceToken = deviceToken
    self.deviceTokenVoip = deviceTokenVoip
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &time)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &deviceToken)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &deviceTokenVoip)
    default:
      if (4 <= protoFieldNumber && protoFieldNumber < 536870912) {
        handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: Comm_Receive.self, protoFieldNumber: protoFieldNumber)
      } else {
        handled = false
      }
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = time {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
    }
    if let v = deviceToken {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "device_token", jsonFieldName: "deviceToken", swiftFieldName: "deviceToken")
    }
    if let v = deviceTokenVoip {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "device_token_voip", jsonFieldName: "deviceTokenVoip", swiftFieldName: "deviceTokenVoip")
    }
    try extensionFieldValues.traverse(visitor: &visitor, start: 4, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Receive) -> Bool {
    if ((time != nil || other.time != nil) && (time == nil || other.time == nil || time! != other.time!)) {return false}
    if ((deviceToken != nil || other.deviceToken != nil) && (deviceToken == nil || other.deviceToken == nil || deviceToken! != other.deviceToken!)) {return false}
    if ((deviceTokenVoip != nil || other.deviceTokenVoip != nil) && (deviceTokenVoip == nil || other.deviceTokenVoip == nil || deviceTokenVoip! != other.deviceTokenVoip!)) {return false}
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, Comm_Receive>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, Comm_Receive>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }
}

///   DATA MODEL
public struct Comm_Presence: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Presence"}
  public var protoMessageName: String {return "Presence"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "userId": 1,
    "activeTime": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "user_id": 1,
    "active_time": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var userId: Data = Data()

  public var activeTime: UInt64? = nil

  public init() {}

  public init(userId: Data = Data(),
    activeTime: UInt64? = nil)
  {
    self.userId = userId
    self.activeTime = activeTime
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &userId)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &activeTime)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: userId, protoFieldNumber: 1, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
    if let v = activeTime {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "active_time", jsonFieldName: "activeTime", swiftFieldName: "activeTime")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Presence) -> Bool {
    if userId != other.userId {return false}
    if ((activeTime != nil || other.activeTime != nil) && (activeTime == nil || other.activeTime == nil || activeTime! != other.activeTime!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Session: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Session"}
  public var protoMessageName: String {return "Session"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "contactsLastUpdate": 1,
    "chatsLastUpdate": 2,
    "callsLastUpdate": 3,
    "imageBaseUrl": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "contacts_last_update": 1,
    "chats_last_update": 2,
    "calls_last_update": 3,
    "image_base_url": 4,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum Platform: ProtobufEnum {
    public typealias RawValue = Int
    case blackberry_ // = 0
    case ios_ // = 1
    case android_ // = 2
    case winphone_ // = 3
    case macx_ // = 4
    case windows_ // = 5
    case linux_ // = 6
    case other_ // = 7

    public init() {
      self = .blackberry_
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .blackberry_
      case 1: self = .ios_
      case 2: self = .android_
      case 3: self = .winphone_
      case 4: self = .macx_
      case 5: self = .windows_
      case 6: self = .linux_
      case 7: self = .other_
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "blackberry_": self = .blackberry_
      case "ios_": self = .ios_
      case "android_": self = .android_
      case "winphone_": self = .winphone_
      case "macx_": self = .macx_
      case "windows_": self = .windows_
      case "linux_": self = .linux_
      case "other_": self = .other_
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "BLACKBERRY_": self = .blackberry_
      case "IOS_": self = .ios_
      case "ANDROID_": self = .android_
      case "WINPHONE_": self = .winphone_
      case "MACX_": self = .macx_
      case "WINDOWS_": self = .windows_
      case "LINUX_": self = .linux_
      case "OTHER_": self = .other_
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "BLACKBERRY_": self = .blackberry_
      case "IOS_": self = .ios_
      case "ANDROID_": self = .android_
      case "WINPHONE_": self = .winphone_
      case "MACX_": self = .macx_
      case "WINDOWS_": self = .windows_
      case "LINUX_": self = .linux_
      case "OTHER_": self = .other_
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .blackberry_: return 0
        case .ios_: return 1
        case .android_: return 2
        case .winphone_: return 3
        case .macx_: return 4
        case .windows_: return 5
        case .linux_: return 6
        case .other_: return 7
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .blackberry_: return "\"BLACKBERRY_\""
        case .ios_: return "\"IOS_\""
        case .android_: return "\"ANDROID_\""
        case .winphone_: return "\"WINPHONE_\""
        case .macx_: return "\"MACX_\""
        case .windows_: return "\"WINDOWS_\""
        case .linux_: return "\"LINUX_\""
        case .other_: return "\"OTHER_\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .blackberry_: return ".blackberry_"
        case .ios_: return ".ios_"
        case .android_: return ".android_"
        case .winphone_: return ".winphone_"
        case .macx_: return ".macx_"
        case .windows_: return ".windows_"
        case .linux_: return ".linux_"
        case .other_: return ".other_"
        }
      }
    }

  }

  public var contactsLastUpdate: UInt64? = nil

  public var chatsLastUpdate: UInt64? = nil

  public var callsLastUpdate: UInt64? = nil

  public var imageBaseURL: String? = nil

  public init() {}

  public init(contactsLastUpdate: UInt64? = nil,
    chatsLastUpdate: UInt64? = nil,
    callsLastUpdate: UInt64? = nil,
    imageBaseURL: String? = nil)
  {
    self.contactsLastUpdate = contactsLastUpdate
    self.chatsLastUpdate = chatsLastUpdate
    self.callsLastUpdate = callsLastUpdate
    self.imageBaseURL = imageBaseURL
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &contactsLastUpdate)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &chatsLastUpdate)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &callsLastUpdate)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &imageBaseURL)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = contactsLastUpdate {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "contacts_last_update", jsonFieldName: "contactsLastUpdate", swiftFieldName: "contactsLastUpdate")
    }
    if let v = chatsLastUpdate {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "chats_last_update", jsonFieldName: "chatsLastUpdate", swiftFieldName: "chatsLastUpdate")
    }
    if let v = callsLastUpdate {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 3, protoFieldName: "calls_last_update", jsonFieldName: "callsLastUpdate", swiftFieldName: "callsLastUpdate")
    }
    if let v = imageBaseURL {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "image_base_url", jsonFieldName: "imageBaseUrl", swiftFieldName: "imageBaseURL")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Session) -> Bool {
    if ((contactsLastUpdate != nil || other.contactsLastUpdate != nil) && (contactsLastUpdate == nil || other.contactsLastUpdate == nil || contactsLastUpdate! != other.contactsLastUpdate!)) {return false}
    if ((chatsLastUpdate != nil || other.chatsLastUpdate != nil) && (chatsLastUpdate == nil || other.chatsLastUpdate == nil || chatsLastUpdate! != other.chatsLastUpdate!)) {return false}
    if ((callsLastUpdate != nil || other.callsLastUpdate != nil) && (callsLastUpdate == nil || other.callsLastUpdate == nil || callsLastUpdate! != other.callsLastUpdate!)) {return false}
    if ((imageBaseURL != nil || other.imageBaseURL != nil) && (imageBaseURL == nil || other.imageBaseURL == nil || imageBaseURL! != other.imageBaseURL!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Profile: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Profile"}
  public var protoMessageName: String {return "Profile"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "avatar": 2,
    "mood": 3,
    "tel": 4,
    "address": 5,
    "dob": 6,
    "gender": 7,
    "vnum": 8,
    "relationship": 9,
    "cover": 10,
    "profileDescription": 11,
    "passChat": 12,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "avatar": 2,
    "mood": 3,
    "tel": 4,
    "address": 5,
    "dob": 6,
    "gender": 7,
    "vnum": 8,
    "relationship": 9,
    "cover": 10,
    "profile_description": 11,
    "pass_chat": 12,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var name: String? = nil

  public var avatar: String? = nil

  public var mood: String? = nil

  public var tel: String? = nil

  public var address: String? = nil

  public var dob: UInt64? = nil

  public var gender: UInt32? = nil

  public var vnum: String? = nil

  public var relationship: UInt32? = nil

  public var cover: String? = nil

  public var profileDescription: String? = nil

  public var passChat: String? = nil

  public init() {}

  public init(name: String? = nil,
    avatar: String? = nil,
    mood: String? = nil,
    tel: String? = nil,
    address: String? = nil,
    dob: UInt64? = nil,
    gender: UInt32? = nil,
    vnum: String? = nil,
    relationship: UInt32? = nil,
    cover: String? = nil,
    profileDescription: String? = nil,
    passChat: String? = nil)
  {
    self.name = name
    self.avatar = avatar
    self.mood = mood
    self.tel = tel
    self.address = address
    self.dob = dob
    self.gender = gender
    self.vnum = vnum
    self.relationship = relationship
    self.cover = cover
    self.profileDescription = profileDescription
    self.passChat = passChat
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &avatar)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &mood)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &tel)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &address)
    case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &dob)
    case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &gender)
    case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &vnum)
    case 9: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &relationship)
    case 10: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &cover)
    case 11: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &profileDescription)
    case 12: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &passChat)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = name {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if let v = avatar {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
    }
    if let v = mood {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "mood", jsonFieldName: "mood", swiftFieldName: "mood")
    }
    if let v = tel {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "tel", jsonFieldName: "tel", swiftFieldName: "tel")
    }
    if let v = address {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "address", jsonFieldName: "address", swiftFieldName: "address")
    }
    if let v = dob {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 6, protoFieldName: "dob", jsonFieldName: "dob", swiftFieldName: "dob")
    }
    if let v = gender {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 7, protoFieldName: "gender", jsonFieldName: "gender", swiftFieldName: "gender")
    }
    if let v = vnum {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 8, protoFieldName: "vnum", jsonFieldName: "vnum", swiftFieldName: "vnum")
    }
    if let v = relationship {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 9, protoFieldName: "relationship", jsonFieldName: "relationship", swiftFieldName: "relationship")
    }
    if let v = cover {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 10, protoFieldName: "cover", jsonFieldName: "cover", swiftFieldName: "cover")
    }
    if let v = profileDescription {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 11, protoFieldName: "profile_description", jsonFieldName: "profileDescription", swiftFieldName: "profileDescription")
    }
    if let v = passChat {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 12, protoFieldName: "pass_chat", jsonFieldName: "passChat", swiftFieldName: "passChat")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Profile) -> Bool {
    if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
    if ((avatar != nil || other.avatar != nil) && (avatar == nil || other.avatar == nil || avatar! != other.avatar!)) {return false}
    if ((mood != nil || other.mood != nil) && (mood == nil || other.mood == nil || mood! != other.mood!)) {return false}
    if ((tel != nil || other.tel != nil) && (tel == nil || other.tel == nil || tel! != other.tel!)) {return false}
    if ((address != nil || other.address != nil) && (address == nil || other.address == nil || address! != other.address!)) {return false}
    if ((dob != nil || other.dob != nil) && (dob == nil || other.dob == nil || dob! != other.dob!)) {return false}
    if ((gender != nil || other.gender != nil) && (gender == nil || other.gender == nil || gender! != other.gender!)) {return false}
    if ((vnum != nil || other.vnum != nil) && (vnum == nil || other.vnum == nil || vnum! != other.vnum!)) {return false}
    if ((relationship != nil || other.relationship != nil) && (relationship == nil || other.relationship == nil || relationship! != other.relationship!)) {return false}
    if ((cover != nil || other.cover != nil) && (cover == nil || other.cover == nil || cover! != other.cover!)) {return false}
    if ((profileDescription != nil || other.profileDescription != nil) && (profileDescription == nil || other.profileDescription == nil || profileDescription! != other.profileDescription!)) {return false}
    if ((passChat != nil || other.passChat != nil) && (passChat == nil || other.passChat == nil || passChat! != other.passChat!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Contact: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Contact"}
  public var protoMessageName: String {return "Contact"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "contactId": 1,
    "type": 10,
    "name": 2,
    "avatar": 3,
    "mood": 4,
    "tel": 5,
    "address": 6,
    "dob": 7,
    "gender": 8,
    "distance": 12,
    "chatId": 11,
    "activeTime": 13,
    "block": 14,
    "blocked": 15,
    "relationship": 16,
    "keyBlock": 17,
    "cover": 18,
    "follow": 19,
    "hiddenTimeline": 20,
    "contactDescription": 21,
    "deleted": 22,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "contact_id": 1,
    "type": 10,
    "name": 2,
    "avatar": 3,
    "mood": 4,
    "tel": 5,
    "address": 6,
    "dob": 7,
    "gender": 8,
    "distance": 12,
    "chat_id": 11,
    "active_time": 13,
    "block": 14,
    "blocked": 15,
    "relationship": 16,
    "key_block": 17,
    "cover": 18,
    "follow": 19,
    "hidden_timeline": 20,
    "contact_description": 21,
    "deleted": 22,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_Contact
    var unknown = ProtobufUnknownStorage()
    var _contactId: Data = Data()
    var _type: UInt32 = 0
    var _name: String? = nil
    var _avatar: String? = nil
    var _mood: String? = nil
    var _tel: String = ""
    var _address: String? = nil
    var _dob: UInt64? = nil
    var _gender: UInt32? = nil
    var _distance: Float? = nil
    var _chatId: Data? = nil
    var _activeTime: UInt64? = nil
    var _block: Bool? = nil
    var _blocked: Bool? = nil
    var _relationship: UInt32? = nil
    var _keyBlock: Data? = nil
    var _cover: String? = nil
    var _follow: Bool? = nil
    var _hiddenTimeline: Bool? = nil
    var _contactDescription: String? = nil
    var _deleted: Bool? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_contactId)
      case 10: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_type)
      case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_name)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_avatar)
      case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_mood)
      case 5: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_tel)
      case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_address)
      case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &_dob)
      case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_gender)
      case 12: handled = try setter.decodeOptionalField(fieldType: ProtobufFloat.self, value: &_distance)
      case 11: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_chatId)
      case 13: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &_activeTime)
      case 14: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_block)
      case 15: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_blocked)
      case 16: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_relationship)
      case 17: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_keyBlock)
      case 18: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_cover)
      case 19: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_follow)
      case 20: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_hiddenTimeline)
      case 21: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_contactDescription)
      case 22: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_deleted)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _contactId, protoFieldNumber: 1, protoFieldName: "contact_id", jsonFieldName: "contactId", swiftFieldName: "contactId")
      if let v = _name {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      }
      if let v = _avatar {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
      }
      if let v = _mood {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "mood", jsonFieldName: "mood", swiftFieldName: "mood")
      }
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _tel, protoFieldNumber: 5, protoFieldName: "tel", jsonFieldName: "tel", swiftFieldName: "tel")
      if let v = _address {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "address", jsonFieldName: "address", swiftFieldName: "address")
      }
      if let v = _dob {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 7, protoFieldName: "dob", jsonFieldName: "dob", swiftFieldName: "dob")
      }
      if let v = _gender {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 8, protoFieldName: "gender", jsonFieldName: "gender", swiftFieldName: "gender")
      }
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _type, protoFieldNumber: 10, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      if let v = _chatId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 11, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      }
      if let v = _distance {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 12, protoFieldName: "distance", jsonFieldName: "distance", swiftFieldName: "distance")
      }
      if let v = _activeTime {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 13, protoFieldName: "active_time", jsonFieldName: "activeTime", swiftFieldName: "activeTime")
      }
      if let v = _block {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 14, protoFieldName: "block", jsonFieldName: "block", swiftFieldName: "block")
      }
      if let v = _blocked {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 15, protoFieldName: "blocked", jsonFieldName: "blocked", swiftFieldName: "blocked")
      }
      if let v = _relationship {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 16, protoFieldName: "relationship", jsonFieldName: "relationship", swiftFieldName: "relationship")
      }
      if let v = _keyBlock {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 17, protoFieldName: "key_block", jsonFieldName: "keyBlock", swiftFieldName: "keyBlock")
      }
      if let v = _cover {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 18, protoFieldName: "cover", jsonFieldName: "cover", swiftFieldName: "cover")
      }
      if let v = _follow {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 19, protoFieldName: "follow", jsonFieldName: "follow", swiftFieldName: "follow")
      }
      if let v = _hiddenTimeline {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 20, protoFieldName: "hidden_timeline", jsonFieldName: "hiddenTimeline", swiftFieldName: "hiddenTimeline")
      }
      if let v = _contactDescription {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 21, protoFieldName: "contact_description", jsonFieldName: "contactDescription", swiftFieldName: "contactDescription")
      }
      if let v = _deleted {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 22, protoFieldName: "deleted", jsonFieldName: "deleted", swiftFieldName: "deleted")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _contactId != other._contactId {return false}
      if _type != other._type {return false}
      if ((_name != nil || other._name != nil) && (_name == nil || other._name == nil || _name! != other._name!)) {return false}
      if ((_avatar != nil || other._avatar != nil) && (_avatar == nil || other._avatar == nil || _avatar! != other._avatar!)) {return false}
      if ((_mood != nil || other._mood != nil) && (_mood == nil || other._mood == nil || _mood! != other._mood!)) {return false}
      if _tel != other._tel {return false}
      if ((_address != nil || other._address != nil) && (_address == nil || other._address == nil || _address! != other._address!)) {return false}
      if ((_dob != nil || other._dob != nil) && (_dob == nil || other._dob == nil || _dob! != other._dob!)) {return false}
      if ((_gender != nil || other._gender != nil) && (_gender == nil || other._gender == nil || _gender! != other._gender!)) {return false}
      if ((_distance != nil || other._distance != nil) && (_distance == nil || other._distance == nil || _distance! != other._distance!)) {return false}
      if ((_chatId != nil || other._chatId != nil) && (_chatId == nil || other._chatId == nil || _chatId! != other._chatId!)) {return false}
      if ((_activeTime != nil || other._activeTime != nil) && (_activeTime == nil || other._activeTime == nil || _activeTime! != other._activeTime!)) {return false}
      if ((_block != nil || other._block != nil) && (_block == nil || other._block == nil || _block! != other._block!)) {return false}
      if ((_blocked != nil || other._blocked != nil) && (_blocked == nil || other._blocked == nil || _blocked! != other._blocked!)) {return false}
      if ((_relationship != nil || other._relationship != nil) && (_relationship == nil || other._relationship == nil || _relationship! != other._relationship!)) {return false}
      if ((_keyBlock != nil || other._keyBlock != nil) && (_keyBlock == nil || other._keyBlock == nil || _keyBlock! != other._keyBlock!)) {return false}
      if ((_cover != nil || other._cover != nil) && (_cover == nil || other._cover == nil || _cover! != other._cover!)) {return false}
      if ((_follow != nil || other._follow != nil) && (_follow == nil || other._follow == nil || _follow! != other._follow!)) {return false}
      if ((_hiddenTimeline != nil || other._hiddenTimeline != nil) && (_hiddenTimeline == nil || other._hiddenTimeline == nil || _hiddenTimeline! != other._hiddenTimeline!)) {return false}
      if ((_contactDescription != nil || other._contactDescription != nil) && (_contactDescription == nil || other._contactDescription == nil || _contactDescription! != other._contactDescription!)) {return false}
      if ((_deleted != nil || other._deleted != nil) && (_deleted == nil || other._deleted == nil || _deleted! != other._deleted!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._contactId = _contactId
      clone._type = _type
      clone._name = _name
      clone._avatar = _avatar
      clone._mood = _mood
      clone._tel = _tel
      clone._address = _address
      clone._dob = _dob
      clone._gender = _gender
      clone._distance = _distance
      clone._chatId = _chatId
      clone._activeTime = _activeTime
      clone._block = _block
      clone._blocked = _blocked
      clone._relationship = _relationship
      clone._keyBlock = _keyBlock
      clone._cover = _cover
      clone._follow = _follow
      clone._hiddenTimeline = _hiddenTimeline
      clone._contactDescription = _contactDescription
      clone._deleted = _deleted
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum Gender: ProtobufEnum {
    public typealias RawValue = Int
    case male // = 0
    case female // = 1
    case others // = 2

    public init() {
      self = .male
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .male
      case 1: self = .female
      case 2: self = .others
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "male": self = .male
      case "female": self = .female
      case "others": self = .others
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "MALE": self = .male
      case "FEMALE": self = .female
      case "OTHERS": self = .others
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "MALE": self = .male
      case "FEMALE": self = .female
      case "OTHERS": self = .others
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .male: return 0
        case .female: return 1
        case .others: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .male: return "\"MALE\""
        case .female: return "\"FEMALE\""
        case .others: return "\"OTHERS\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .male: return ".male"
        case .female: return ".female"
        case .others: return ".others"
        }
      }
    }

  }

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case none // = 0
    case pcontact // = 1
    case vcontact // = 2
    case system // = 3
    case vtUser // = 4
    case noneVtUser // = 5

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .pcontact
      case 2: self = .vcontact
      case 3: self = .system
      case 4: self = .vtUser
      case 5: self = .noneVtUser
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "none": self = .none
      case "pcontact": self = .pcontact
      case "vcontact": self = .vcontact
      case "system": self = .system
      case "vtUser": self = .vtUser
      case "noneVtUser": self = .noneVtUser
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NONE": self = .none
      case "PCONTACT": self = .pcontact
      case "VCONTACT": self = .vcontact
      case "SYSTEM": self = .system
      case "VT_USER": self = .vtUser
      case "NONE_VT_USER": self = .noneVtUser
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NONE": self = .none
      case "PCONTACT": self = .pcontact
      case "VCONTACT": self = .vcontact
      case "SYSTEM": self = .system
      case "VT_USER": self = .vtUser
      case "NONE_VT_USER": self = .noneVtUser
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .none: return 0
        case .pcontact: return 1
        case .vcontact: return 2
        case .system: return 3
        case .vtUser: return 4
        case .noneVtUser: return 5
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .none: return "\"NONE\""
        case .pcontact: return "\"PCONTACT\""
        case .vcontact: return "\"VCONTACT\""
        case .system: return "\"SYSTEM\""
        case .vtUser: return "\"VT_USER\""
        case .noneVtUser: return "\"NONE_VT_USER\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .none: return ".none"
        case .pcontact: return ".pcontact"
        case .vcontact: return ".vcontact"
        case .system: return ".system"
        case .vtUser: return ".vtUser"
        case .noneVtUser: return ".noneVtUser"
        }
      }
    }

  }

  public enum Relationship: ProtobufEnum {
    public typealias RawValue = Int
    case inARelationship // = 0
    case married // = 1
    case searching // = 2
    case alone // = 3

    public init() {
      self = .inARelationship
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .inARelationship
      case 1: self = .married
      case 2: self = .searching
      case 3: self = .alone
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "inARelationship": self = .inARelationship
      case "married": self = .married
      case "searching": self = .searching
      case "alone": self = .alone
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "IN_A_RELATIONSHIP": self = .inARelationship
      case "MARRIED": self = .married
      case "SEARCHING": self = .searching
      case "ALONE": self = .alone
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "IN_A_RELATIONSHIP": self = .inARelationship
      case "MARRIED": self = .married
      case "SEARCHING": self = .searching
      case "ALONE": self = .alone
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .inARelationship: return 0
        case .married: return 1
        case .searching: return 2
        case .alone: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .inARelationship: return "\"IN_A_RELATIONSHIP\""
        case .married: return "\"MARRIED\""
        case .searching: return "\"SEARCHING\""
        case .alone: return "\"ALONE\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .inARelationship: return ".inARelationship"
        case .married: return ".married"
        case .searching: return ".searching"
        case .alone: return ".alone"
        }
      }
    }

  }

  public var contactId: Data {
    get {return _storage._contactId}
    set {_uniqueStorage()._contactId = newValue}
  }

  public var type: UInt32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var name: String? {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var avatar: String? {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  public var mood: String? {
    get {return _storage._mood}
    set {_uniqueStorage()._mood = newValue}
  }

  public var tel: String {
    get {return _storage._tel}
    set {_uniqueStorage()._tel = newValue}
  }

  public var address: String? {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  public var dob: UInt64? {
    get {return _storage._dob}
    set {_uniqueStorage()._dob = newValue}
  }

  public var gender: UInt32? {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var distance: Float? {
    get {return _storage._distance}
    set {_uniqueStorage()._distance = newValue}
  }

  public var chatId: Data? {
    get {return _storage._chatId}
    set {_uniqueStorage()._chatId = newValue}
  }

  public var activeTime: UInt64? {
    get {return _storage._activeTime}
    set {_uniqueStorage()._activeTime = newValue}
  }

  public var block: Bool? {
    get {return _storage._block}
    set {_uniqueStorage()._block = newValue}
  }

  public var blocked: Bool? {
    get {return _storage._blocked}
    set {_uniqueStorage()._blocked = newValue}
  }

  public var relationship: UInt32? {
    get {return _storage._relationship}
    set {_uniqueStorage()._relationship = newValue}
  }

  public var keyBlock: Data? {
    get {return _storage._keyBlock}
    set {_uniqueStorage()._keyBlock = newValue}
  }

  public var cover: String? {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  public var follow: Bool? {
    get {return _storage._follow}
    set {_uniqueStorage()._follow = newValue}
  }

  public var hiddenTimeline: Bool? {
    get {return _storage._hiddenTimeline}
    set {_uniqueStorage()._hiddenTimeline = newValue}
  }

  public var contactDescription: String? {
    get {return _storage._contactDescription}
    set {_uniqueStorage()._contactDescription = newValue}
  }

  public var deleted: Bool? {
    get {return _storage._deleted}
    set {_uniqueStorage()._deleted = newValue}
  }

  public init() {}

  public init(contactId: Data = Data(),
    type: UInt32 = 0,
    name: String? = nil,
    avatar: String? = nil,
    mood: String? = nil,
    tel: String = "",
    address: String? = nil,
    dob: UInt64? = nil,
    gender: UInt32? = nil,
    distance: Float? = nil,
    chatId: Data? = nil,
    activeTime: UInt64? = nil,
    block: Bool? = nil,
    blocked: Bool? = nil,
    relationship: UInt32? = nil,
    keyBlock: Data? = nil,
    cover: String? = nil,
    follow: Bool? = nil,
    hiddenTimeline: Bool? = nil,
    contactDescription: String? = nil,
    deleted: Bool? = nil)
  {
    let storage = _uniqueStorage()
    storage._contactId = contactId
    storage._type = type
    storage._name = name
    storage._avatar = avatar
    storage._mood = mood
    storage._tel = tel
    storage._address = address
    storage._dob = dob
    storage._gender = gender
    storage._distance = distance
    storage._chatId = chatId
    storage._activeTime = activeTime
    storage._block = block
    storage._blocked = blocked
    storage._relationship = relationship
    storage._keyBlock = keyBlock
    storage._cover = cover
    storage._follow = follow
    storage._hiddenTimeline = hiddenTimeline
    storage._contactDescription = contactDescription
    storage._deleted = deleted
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Contact) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_Member: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Member"}
  public var protoMessageName: String {return "Member"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "memberId": 1,
    "name": 2,
    "avatar": 3,
    "lastSeen": 4,
    "viettalkUser": 5,
    "follow": 6,
    "tel": 7,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "member_id": 1,
    "name": 2,
    "avatar": 3,
    "last_seen": 4,
    "viettalk_user": 5,
    "follow": 6,
    "tel": 7,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var memberId: Data = Data()

  public var name: String? = nil

  public var avatar: String? = nil

  public var lastSeen: UInt64? = nil

  private var _viettalkUser: Bool? = nil
  public var viettalkUser: Bool? {
    get {return _viettalkUser ?? true}
    set {_viettalkUser = newValue}
  }

  public var follow: Bool? = nil

  public var tel: String? = nil

  public init() {}

  public init(memberId: Data = Data(),
    name: String? = nil,
    avatar: String? = nil,
    lastSeen: UInt64? = nil,
    viettalkUser: Bool? = nil,
    follow: Bool? = nil,
    tel: String? = nil)
  {
    self.memberId = memberId
    self.name = name
    self.avatar = avatar
    self.lastSeen = lastSeen
    self.viettalkUser = viettalkUser
    self.follow = follow
    self.tel = tel
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &memberId)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &avatar)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &lastSeen)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &viettalkUser)
    case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &follow)
    case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &tel)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: memberId, protoFieldNumber: 1, protoFieldName: "member_id", jsonFieldName: "memberId", swiftFieldName: "memberId")
    if let v = name {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if let v = avatar {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
    }
    if let v = lastSeen {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 4, protoFieldName: "last_seen", jsonFieldName: "lastSeen", swiftFieldName: "lastSeen")
    }
    if let v = viettalkUser {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 5, protoFieldName: "viettalk_user", jsonFieldName: "viettalkUser", swiftFieldName: "viettalkUser")
    }
    if let v = follow {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 6, protoFieldName: "follow", jsonFieldName: "follow", swiftFieldName: "follow")
    }
    if let v = tel {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 7, protoFieldName: "tel", jsonFieldName: "tel", swiftFieldName: "tel")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Member) -> Bool {
    if memberId != other.memberId {return false}
    if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
    if ((avatar != nil || other.avatar != nil) && (avatar == nil || other.avatar == nil || avatar! != other.avatar!)) {return false}
    if ((lastSeen != nil || other.lastSeen != nil) && (lastSeen == nil || other.lastSeen == nil || lastSeen! != other.lastSeen!)) {return false}
    if (((viettalkUser != nil && viettalkUser! != true) || (other.viettalkUser != nil && other.viettalkUser! != true)) && (viettalkUser == nil || other.viettalkUser == nil || viettalkUser! != other.viettalkUser!)) {return false}
    if ((follow != nil || other.follow != nil) && (follow == nil || other.follow == nil || follow! != other.follow!)) {return false}
    if ((tel != nil || other.tel != nil) && (tel == nil || other.tel == nil || tel! != other.tel!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Chat: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Chat"}
  public var protoMessageName: String {return "Chat"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "chatId": 1,
    "type": 2,
    "name": 3,
    "avatar": 4,
    "joinTime": 6,
    "lastMessage": 10,
    "noname": 8,
    "members": 9,
    "unreadCount": 11,
    "blocked": 12,
    "hideChat": 13,
    "autoMode": 14,
    "disable": 15,
    "privateChat": 16,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "chat_id": 1,
    "type": 2,
    "name": 3,
    "avatar": 4,
    "join_time": 6,
    "last_message": 10,
    "noname": 8,
    "members": 9,
    "unread_count": 11,
    "blocked": 12,
    "hide_chat": 13,
    "auto_mode": 14,
    "disable": 15,
    "private_chat": 16,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_Chat
    var unknown = ProtobufUnknownStorage()
    var _chatId: Data = Data()
    var _type: UInt32 = 0
    var _name: String = ""
    var _avatar: String? = nil
    var _joinTime: UInt64 = 0
    var _lastMessage: Comm_Message? = nil
    var _noname: Bool? = nil
    var _members: [Comm_Member] = []
    var _unreadCount: UInt32? = nil
    var _blocked: Bool? = nil
    var _hideChat: Bool? = nil
    var _autoMode: Bool? = nil
    var _disable: Bool? = nil
    var _privateChat: Bool? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_chatId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_type)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_name)
      case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_avatar)
      case 6: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_joinTime)
      case 10: handled = try setter.decodeOptionalMessageField(fieldType: Comm_Message.self, value: &_lastMessage)
      case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_noname)
      case 9: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Member.self, value: &_members)
      case 11: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_unreadCount)
      case 12: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_blocked)
      case 13: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_hideChat)
      case 14: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_autoMode)
      case 15: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_disable)
      case 16: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_privateChat)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _chatId, protoFieldNumber: 1, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _type, protoFieldNumber: 2, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _name, protoFieldNumber: 3, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      if let v = _avatar {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
      }
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _joinTime, protoFieldNumber: 6, protoFieldName: "join_time", jsonFieldName: "joinTime", swiftFieldName: "joinTime")
      if let v = _noname {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 8, protoFieldName: "noname", jsonFieldName: "noname", swiftFieldName: "noname")
      }
      if !_members.isEmpty {
        try visitor.visitRepeatedMessageField(value: _members, protoFieldNumber: 9, protoFieldName: "members", jsonFieldName: "members", swiftFieldName: "members")
      }
      if let v = _lastMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 10, protoFieldName: "last_message", jsonFieldName: "lastMessage", swiftFieldName: "lastMessage")
      }
      if let v = _unreadCount {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 11, protoFieldName: "unread_count", jsonFieldName: "unreadCount", swiftFieldName: "unreadCount")
      }
      if let v = _blocked {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 12, protoFieldName: "blocked", jsonFieldName: "blocked", swiftFieldName: "blocked")
      }
      if let v = _hideChat {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 13, protoFieldName: "hide_chat", jsonFieldName: "hideChat", swiftFieldName: "hideChat")
      }
      if let v = _autoMode {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 14, protoFieldName: "auto_mode", jsonFieldName: "autoMode", swiftFieldName: "autoMode")
      }
      if let v = _disable {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 15, protoFieldName: "disable", jsonFieldName: "disable", swiftFieldName: "disable")
      }
      if let v = _privateChat {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 16, protoFieldName: "private_chat", jsonFieldName: "privateChat", swiftFieldName: "privateChat")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _chatId != other._chatId {return false}
      if _type != other._type {return false}
      if _name != other._name {return false}
      if ((_avatar != nil || other._avatar != nil) && (_avatar == nil || other._avatar == nil || _avatar! != other._avatar!)) {return false}
      if _joinTime != other._joinTime {return false}
      if ((_lastMessage != nil || other._lastMessage != nil) && (_lastMessage == nil || other._lastMessage == nil || _lastMessage! != other._lastMessage!)) {return false}
      if ((_noname != nil || other._noname != nil) && (_noname == nil || other._noname == nil || _noname! != other._noname!)) {return false}
      if _members != other._members {return false}
      if ((_unreadCount != nil || other._unreadCount != nil) && (_unreadCount == nil || other._unreadCount == nil || _unreadCount! != other._unreadCount!)) {return false}
      if (((_blocked != nil && _blocked! != false) || (other._blocked != nil && other._blocked! != false)) && (_blocked == nil || other._blocked == nil || _blocked! != other._blocked!)) {return false}
      if (((_hideChat != nil && _hideChat! != false) || (other._hideChat != nil && other._hideChat! != false)) && (_hideChat == nil || other._hideChat == nil || _hideChat! != other._hideChat!)) {return false}
      if (((_autoMode != nil && _autoMode! != false) || (other._autoMode != nil && other._autoMode! != false)) && (_autoMode == nil || other._autoMode == nil || _autoMode! != other._autoMode!)) {return false}
      if (((_disable != nil && _disable! != false) || (other._disable != nil && other._disable! != false)) && (_disable == nil || other._disable == nil || _disable! != other._disable!)) {return false}
      if (((_privateChat != nil && _privateChat! != false) || (other._privateChat != nil && other._privateChat! != false)) && (_privateChat == nil || other._privateChat == nil || _privateChat! != other._privateChat!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._chatId = _chatId
      clone._type = _type
      clone._name = _name
      clone._avatar = _avatar
      clone._joinTime = _joinTime
      clone._lastMessage = _lastMessage
      clone._noname = _noname
      clone._members = _members
      clone._unreadCount = _unreadCount
      clone._blocked = _blocked
      clone._hideChat = _hideChat
      clone._autoMode = _autoMode
      clone._disable = _disable
      clone._privateChat = _privateChat
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case peer // = 0
    case group // = 1

    public init() {
      self = .peer
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .peer
      case 1: self = .group
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "peer": self = .peer
      case "group": self = .group
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "PEER": self = .peer
      case "GROUP": self = .group
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "PEER": self = .peer
      case "GROUP": self = .group
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .peer: return 0
        case .group: return 1
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .peer: return "\"PEER\""
        case .group: return "\"GROUP\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .peer: return ".peer"
        case .group: return ".group"
        }
      }
    }

  }

  public var chatId: Data {
    get {return _storage._chatId}
    set {_uniqueStorage()._chatId = newValue}
  }

  public var type: UInt32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var avatar: String? {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  public var joinTime: UInt64 {
    get {return _storage._joinTime}
    set {_uniqueStorage()._joinTime = newValue}
  }

  public var lastMessage: Comm_Message? {
    get {return _storage._lastMessage}
    set {_uniqueStorage()._lastMessage = newValue}
  }

  public var noname: Bool? {
    get {return _storage._noname}
    set {_uniqueStorage()._noname = newValue}
  }

  public var members: [Comm_Member] {
    get {return _storage._members}
    set {_uniqueStorage()._members = newValue}
  }

  public var unreadCount: UInt32? {
    get {return _storage._unreadCount}
    set {_uniqueStorage()._unreadCount = newValue}
  }

  public var blocked: Bool? {
    get {return _storage._blocked ?? false}
    set {_uniqueStorage()._blocked = newValue}
  }

  public var hideChat: Bool? {
    get {return _storage._hideChat ?? false}
    set {_uniqueStorage()._hideChat = newValue}
  }

  public var autoMode: Bool? {
    get {return _storage._autoMode ?? false}
    set {_uniqueStorage()._autoMode = newValue}
  }

  public var disable: Bool? {
    get {return _storage._disable ?? false}
    set {_uniqueStorage()._disable = newValue}
  }

  public var privateChat: Bool? {
    get {return _storage._privateChat ?? false}
    set {_uniqueStorage()._privateChat = newValue}
  }

  public init() {}

  public init(chatId: Data = Data(),
    type: UInt32 = 0,
    name: String = "",
    avatar: String? = nil,
    joinTime: UInt64 = 0,
    lastMessage: Comm_Message? = nil,
    noname: Bool? = nil,
    members: [Comm_Member] = [],
    unreadCount: UInt32? = nil,
    blocked: Bool? = nil,
    hideChat: Bool? = nil,
    autoMode: Bool? = nil,
    disable: Bool? = nil,
    privateChat: Bool? = nil)
  {
    let storage = _uniqueStorage()
    storage._chatId = chatId
    storage._type = type
    storage._name = name
    storage._avatar = avatar
    storage._joinTime = joinTime
    storage._lastMessage = lastMessage
    storage._noname = noname
    if !members.isEmpty {
      storage._members = members
    }
    storage._unreadCount = unreadCount
    storage._blocked = blocked
    storage._hideChat = hideChat
    storage._autoMode = autoMode
    storage._disable = disable
    storage._privateChat = privateChat
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Chat) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_Call: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Call"}
  public var protoMessageName: String {return "Call"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "callId": 1,
    "callerId": 2,
    "callerName": 3,
    "callerAvatar": 4,
    "callerTel": 5,
    "calleeId": 6,
    "calleeName": 7,
    "calleeAvatar": 8,
    "calleeTel": 9,
    "startTime": 10,
    "type": 11,
    "duration": 13,
    "seen": 14,
    "tempPhone": 15,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "call_id": 1,
    "caller_id": 2,
    "caller_name": 3,
    "caller_avatar": 4,
    "caller_tel": 5,
    "callee_id": 6,
    "callee_name": 7,
    "callee_avatar": 8,
    "callee_tel": 9,
    "start_time": 10,
    "type": 11,
    "duration": 13,
    "seen": 14,
    "temp_phone": 15,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case a2A // = 0
    case a2P // = 1
    case p2A // = 2
    case group // = 3

    public init() {
      self = .a2A
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a2A
      case 1: self = .a2P
      case 2: self = .p2A
      case 3: self = .group
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "a2A": self = .a2A
      case "a2P": self = .a2P
      case "p2A": self = .p2A
      case "group": self = .group
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "A2A": self = .a2A
      case "A2P": self = .a2P
      case "P2A": self = .p2A
      case "GROUP": self = .group
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "A2A": self = .a2A
      case "A2P": self = .a2P
      case "P2A": self = .p2A
      case "GROUP": self = .group
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a2A: return 0
        case .a2P: return 1
        case .p2A: return 2
        case .group: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a2A: return "\"A2A\""
        case .a2P: return "\"A2P\""
        case .p2A: return "\"P2A\""
        case .group: return "\"GROUP\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a2A: return ".a2A"
        case .a2P: return ".a2P"
        case .p2A: return ".p2A"
        case .group: return ".group"
        }
      }
    }

  }

  public var callId: Data = Data()

  public var callerId: Data = Data()

  public var callerName: String? = nil

  public var callerAvatar: String? = nil

  public var callerTel: String? = nil

  public var calleeId: Data = Data()

  public var calleeName: String? = nil

  public var calleeAvatar: String? = nil

  public var calleeTel: String? = nil

  public var startTime: UInt64 = 0

  public var type: Int32 = 0

  private var _duration: UInt64 = 0
  public var duration: UInt64 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }

  private var _seen: Bool? = nil
  public var seen: Bool? {
    get {return _seen ?? false}
    set {_seen = newValue}
  }

  public var tempPhone: String? = nil

  public init() {}

  public init(callId: Data = Data(),
    callerId: Data = Data(),
    callerName: String? = nil,
    callerAvatar: String? = nil,
    callerTel: String? = nil,
    calleeId: Data = Data(),
    calleeName: String? = nil,
    calleeAvatar: String? = nil,
    calleeTel: String? = nil,
    startTime: UInt64 = 0,
    type: Int32 = 0,
    duration: UInt64 = 0,
    seen: Bool? = nil,
    tempPhone: String? = nil)
  {
    self.callId = callId
    self.callerId = callerId
    self.callerName = callerName
    self.callerAvatar = callerAvatar
    self.callerTel = callerTel
    self.calleeId = calleeId
    self.calleeName = calleeName
    self.calleeAvatar = calleeAvatar
    self.calleeTel = calleeTel
    self.startTime = startTime
    self.type = type
    self.duration = duration
    self.seen = seen
    self.tempPhone = tempPhone
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &callId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &callerId)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &callerName)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &callerAvatar)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &callerTel)
    case 6: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &calleeId)
    case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &calleeName)
    case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &calleeAvatar)
    case 9: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &calleeTel)
    case 10: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &startTime)
    case 11: handled = try setter.decodeRequiredField(fieldType: ProtobufInt32.self, value: &type)
    case 13: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &duration)
    case 14: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &seen)
    case 15: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &tempPhone)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: callId, protoFieldNumber: 1, protoFieldName: "call_id", jsonFieldName: "callId", swiftFieldName: "callId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: callerId, protoFieldNumber: 2, protoFieldName: "caller_id", jsonFieldName: "callerId", swiftFieldName: "callerId")
    if let v = callerName {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "caller_name", jsonFieldName: "callerName", swiftFieldName: "callerName")
    }
    if let v = callerAvatar {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "caller_avatar", jsonFieldName: "callerAvatar", swiftFieldName: "callerAvatar")
    }
    if let v = callerTel {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "caller_tel", jsonFieldName: "callerTel", swiftFieldName: "callerTel")
    }
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: calleeId, protoFieldNumber: 6, protoFieldName: "callee_id", jsonFieldName: "calleeId", swiftFieldName: "calleeId")
    if let v = calleeName {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 7, protoFieldName: "callee_name", jsonFieldName: "calleeName", swiftFieldName: "calleeName")
    }
    if let v = calleeAvatar {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 8, protoFieldName: "callee_avatar", jsonFieldName: "calleeAvatar", swiftFieldName: "calleeAvatar")
    }
    if let v = calleeTel {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 9, protoFieldName: "callee_tel", jsonFieldName: "calleeTel", swiftFieldName: "calleeTel")
    }
    try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: startTime, protoFieldNumber: 10, protoFieldName: "start_time", jsonFieldName: "startTime", swiftFieldName: "startTime")
    try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: type, protoFieldNumber: 11, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: duration, protoFieldNumber: 13, protoFieldName: "duration", jsonFieldName: "duration", swiftFieldName: "duration")
    if let v = seen {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 14, protoFieldName: "seen", jsonFieldName: "seen", swiftFieldName: "seen")
    }
    if let v = tempPhone {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 15, protoFieldName: "temp_phone", jsonFieldName: "tempPhone", swiftFieldName: "tempPhone")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Call) -> Bool {
    if callId != other.callId {return false}
    if callerId != other.callerId {return false}
    if ((callerName != nil || other.callerName != nil) && (callerName == nil || other.callerName == nil || callerName! != other.callerName!)) {return false}
    if ((callerAvatar != nil || other.callerAvatar != nil) && (callerAvatar == nil || other.callerAvatar == nil || callerAvatar! != other.callerAvatar!)) {return false}
    if ((callerTel != nil || other.callerTel != nil) && (callerTel == nil || other.callerTel == nil || callerTel! != other.callerTel!)) {return false}
    if calleeId != other.calleeId {return false}
    if ((calleeName != nil || other.calleeName != nil) && (calleeName == nil || other.calleeName == nil || calleeName! != other.calleeName!)) {return false}
    if ((calleeAvatar != nil || other.calleeAvatar != nil) && (calleeAvatar == nil || other.calleeAvatar == nil || calleeAvatar! != other.calleeAvatar!)) {return false}
    if ((calleeTel != nil || other.calleeTel != nil) && (calleeTel == nil || other.calleeTel == nil || calleeTel! != other.calleeTel!)) {return false}
    if startTime != other.startTime {return false}
    if type != other.type {return false}
    if duration != other.duration {return false}
    if (((seen != nil && seen! != false) || (other.seen != nil && other.seen! != false)) && (seen == nil || other.seen == nil || seen! != other.seen!)) {return false}
    if ((tempPhone != nil || other.tempPhone != nil) && (tempPhone == nil || other.tempPhone == nil || tempPhone! != other.tempPhone!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Message"}
  public var protoMessageName: String {return "Message"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "messageId": 1,
    "chatId": 2,
    "sender": 3,
    "time": 4,
    "type": 5,
    "smsout": 6,
    "state": 7,
    "data": 8,
    "refMsg": 9,
    "status": 10,
    "useTempPhone": 11,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "message_id": 1,
    "chat_id": 2,
    "sender": 3,
    "time": 4,
    "type": 5,
    "smsout": 6,
    "state": 7,
    "data": 8,
    "ref_msg": 9,
    "status": 10,
    "use_temp_phone": 11,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_Message
    var unknown = ProtobufUnknownStorage()
    var _messageId: Data = Data()
    var _chatId: Data = Data()
    var _sender: Comm_Member? = nil
    var _time: UInt64 = 0
    var _type: UInt32 = 0
    var _smsout: UInt32 = 0
    var _state: UInt32 = 0
    var _data: Data = Data()
    var _refMsg: Data? = nil
    var _status: UInt32? = nil
    var _useTempPhone: Bool? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_messageId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_chatId)
      case 3: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Member.self, value: &_sender)
      case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_time)
      case 5: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_type)
      case 6: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_smsout)
      case 7: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_state)
      case 8: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_data)
      case 9: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_refMsg)
      case 10: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_status)
      case 11: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_useTempPhone)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _messageId, protoFieldNumber: 1, protoFieldName: "message_id", jsonFieldName: "messageId", swiftFieldName: "messageId")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _chatId, protoFieldNumber: 2, protoFieldName: "chat_id", jsonFieldName: "chatId", swiftFieldName: "chatId")
      if let v = _sender {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "sender", jsonFieldName: "sender", swiftFieldName: "sender")
      }
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _time, protoFieldNumber: 4, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _type, protoFieldNumber: 5, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _smsout, protoFieldNumber: 6, protoFieldName: "smsout", jsonFieldName: "smsout", swiftFieldName: "smsout")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _state, protoFieldNumber: 7, protoFieldName: "state", jsonFieldName: "state", swiftFieldName: "state")
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _data, protoFieldNumber: 8, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
      if let v = _refMsg {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 9, protoFieldName: "ref_msg", jsonFieldName: "refMsg", swiftFieldName: "refMsg")
      }
      if let v = _status {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 10, protoFieldName: "status", jsonFieldName: "status", swiftFieldName: "status")
      }
      if let v = _useTempPhone {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 11, protoFieldName: "use_temp_phone", jsonFieldName: "useTempPhone", swiftFieldName: "useTempPhone")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _messageId != other._messageId {return false}
      if _chatId != other._chatId {return false}
      if _sender != other._sender {return false}
      if _time != other._time {return false}
      if _type != other._type {return false}
      if _smsout != other._smsout {return false}
      if _state != other._state {return false}
      if _data != other._data {return false}
      if ((_refMsg != nil || other._refMsg != nil) && (_refMsg == nil || other._refMsg == nil || _refMsg! != other._refMsg!)) {return false}
      if ((_status != nil || other._status != nil) && (_status == nil || other._status == nil || _status! != other._status!)) {return false}
      if (((_useTempPhone != nil && _useTempPhone! != false) || (other._useTempPhone != nil && other._useTempPhone! != false)) && (_useTempPhone == nil || other._useTempPhone == nil || _useTempPhone! != other._useTempPhone!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._messageId = _messageId
      clone._chatId = _chatId
      clone._sender = _sender
      clone._time = _time
      clone._type = _type
      clone._smsout = _smsout
      clone._state = _state
      clone._data = _data
      clone._refMsg = _refMsg
      clone._status = _status
      clone._useTempPhone = _useTempPhone
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case text // = 0
    case photo // = 1
    case voice // = 2
    case video // = 3
    case location // = 4
    case sticker // = 5
    case contact // = 6
    case file // = 16
    case createChat // = 7
    case addMember // = 8
    case removeMember // = 9
    case leaveGroup // = 13
    case createGroup // = 15
    case editMsg // = 10
    case deleteMsg // = 11
    case sendSms // = 12
    case changeNameGroup // = 14
    case call // = 17

    public init() {
      self = .text
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .text
      case 1: self = .photo
      case 2: self = .voice
      case 3: self = .video
      case 4: self = .location
      case 5: self = .sticker
      case 6: self = .contact
      case 16: self = .file
      case 7: self = .createChat
      case 8: self = .addMember
      case 9: self = .removeMember
      case 13: self = .leaveGroup
      case 15: self = .createGroup
      case 10: self = .editMsg
      case 11: self = .deleteMsg
      case 12: self = .sendSms
      case 14: self = .changeNameGroup
      case 17: self = .call
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "text": self = .text
      case "photo": self = .photo
      case "voice": self = .voice
      case "video": self = .video
      case "location": self = .location
      case "sticker": self = .sticker
      case "contact": self = .contact
      case "file": self = .file
      case "createChat": self = .createChat
      case "addMember": self = .addMember
      case "removeMember": self = .removeMember
      case "leaveGroup": self = .leaveGroup
      case "createGroup": self = .createGroup
      case "editMsg": self = .editMsg
      case "deleteMsg": self = .deleteMsg
      case "sendSms": self = .sendSms
      case "changeNameGroup": self = .changeNameGroup
      case "call": self = .call
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "TEXT": self = .text
      case "PHOTO": self = .photo
      case "VOICE": self = .voice
      case "VIDEO": self = .video
      case "LOCATION": self = .location
      case "STICKER": self = .sticker
      case "CONTACT": self = .contact
      case "FILE": self = .file
      case "CREATE_CHAT": self = .createChat
      case "ADD_MEMBER": self = .addMember
      case "REMOVE_MEMBER": self = .removeMember
      case "LEAVE_GROUP": self = .leaveGroup
      case "CREATE_GROUP": self = .createGroup
      case "EDIT_MSG": self = .editMsg
      case "DELETE_MSG": self = .deleteMsg
      case "SEND_SMS": self = .sendSms
      case "CHANGE_NAME_GROUP": self = .changeNameGroup
      case "CALL": self = .call
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "TEXT": self = .text
      case "PHOTO": self = .photo
      case "VOICE": self = .voice
      case "VIDEO": self = .video
      case "LOCATION": self = .location
      case "STICKER": self = .sticker
      case "CONTACT": self = .contact
      case "FILE": self = .file
      case "CREATE_CHAT": self = .createChat
      case "ADD_MEMBER": self = .addMember
      case "REMOVE_MEMBER": self = .removeMember
      case "LEAVE_GROUP": self = .leaveGroup
      case "CREATE_GROUP": self = .createGroup
      case "EDIT_MSG": self = .editMsg
      case "DELETE_MSG": self = .deleteMsg
      case "SEND_SMS": self = .sendSms
      case "CHANGE_NAME_GROUP": self = .changeNameGroup
      case "CALL": self = .call
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .text: return 0
        case .photo: return 1
        case .voice: return 2
        case .video: return 3
        case .location: return 4
        case .sticker: return 5
        case .contact: return 6
        case .file: return 16
        case .createChat: return 7
        case .addMember: return 8
        case .removeMember: return 9
        case .leaveGroup: return 13
        case .createGroup: return 15
        case .editMsg: return 10
        case .deleteMsg: return 11
        case .sendSms: return 12
        case .changeNameGroup: return 14
        case .call: return 17
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .text: return "\"TEXT\""
        case .photo: return "\"PHOTO\""
        case .voice: return "\"VOICE\""
        case .video: return "\"VIDEO\""
        case .location: return "\"LOCATION\""
        case .sticker: return "\"STICKER\""
        case .contact: return "\"CONTACT\""
        case .file: return "\"FILE\""
        case .createChat: return "\"CREATE_CHAT\""
        case .addMember: return "\"ADD_MEMBER\""
        case .removeMember: return "\"REMOVE_MEMBER\""
        case .leaveGroup: return "\"LEAVE_GROUP\""
        case .createGroup: return "\"CREATE_GROUP\""
        case .editMsg: return "\"EDIT_MSG\""
        case .deleteMsg: return "\"DELETE_MSG\""
        case .sendSms: return "\"SEND_SMS\""
        case .changeNameGroup: return "\"CHANGE_NAME_GROUP\""
        case .call: return "\"CALL\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .text: return ".text"
        case .photo: return ".photo"
        case .voice: return ".voice"
        case .video: return ".video"
        case .location: return ".location"
        case .sticker: return ".sticker"
        case .contact: return ".contact"
        case .file: return ".file"
        case .createChat: return ".createChat"
        case .addMember: return ".addMember"
        case .removeMember: return ".removeMember"
        case .leaveGroup: return ".leaveGroup"
        case .createGroup: return ".createGroup"
        case .editMsg: return ".editMsg"
        case .deleteMsg: return ".deleteMsg"
        case .sendSms: return ".sendSms"
        case .changeNameGroup: return ".changeNameGroup"
        case .call: return ".call"
        }
      }
    }

  }

  public enum State: ProtobufEnum {
    public typealias RawValue = Int
    case normal // = 0
    case edited // = 1
    case deleted // = 2
    case expire // = 3

    public init() {
      self = .normal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .edited
      case 2: self = .deleted
      case 3: self = .expire
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "normal": self = .normal
      case "edited": self = .edited
      case "deleted": self = .deleted
      case "expire": self = .expire
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NORMAL": self = .normal
      case "EDITED": self = .edited
      case "DELETED": self = .deleted
      case "EXPIRE": self = .expire
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NORMAL": self = .normal
      case "EDITED": self = .edited
      case "DELETED": self = .deleted
      case "EXPIRE": self = .expire
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .normal: return 0
        case .edited: return 1
        case .deleted: return 2
        case .expire: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .normal: return "\"NORMAL\""
        case .edited: return "\"EDITED\""
        case .deleted: return "\"DELETED\""
        case .expire: return "\"EXPIRE\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .normal: return ".normal"
        case .edited: return ".edited"
        case .deleted: return ".deleted"
        case .expire: return ".expire"
        }
      }
    }

  }

  public enum Sms: ProtobufEnum {
    public typealias RawValue = Int
    case none // = 0
    case pending // = 1
    case sent // = 2
    case smsError // = 3

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .pending
      case 2: self = .sent
      case 3: self = .smsError
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "none": self = .none
      case "pending": self = .pending
      case "sent": self = .sent
      case "smsError": self = .smsError
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NONE": self = .none
      case "PENDING": self = .pending
      case "SENT": self = .sent
      case "SMS_ERROR": self = .smsError
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NONE": self = .none
      case "PENDING": self = .pending
      case "SENT": self = .sent
      case "SMS_ERROR": self = .smsError
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .none: return 0
        case .pending: return 1
        case .sent: return 2
        case .smsError: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .none: return "\"NONE\""
        case .pending: return "\"PENDING\""
        case .sent: return "\"SENT\""
        case .smsError: return "\"SMS_ERROR\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .none: return ".none"
        case .pending: return ".pending"
        case .sent: return ".sent"
        case .smsError: return ".smsError"
        }
      }
    }

  }

  public enum Status: ProtobufEnum {
    public typealias RawValue = Int
    case msgSending // = 0
    case msgSent // = 1
    case msgDelivered // = 2
    case msgSeen // = 3
    case msgSendError // = 4

    public init() {
      self = .msgSending
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .msgSending
      case 1: self = .msgSent
      case 2: self = .msgDelivered
      case 3: self = .msgSeen
      case 4: self = .msgSendError
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "msgSending": self = .msgSending
      case "msgSent": self = .msgSent
      case "msgDelivered": self = .msgDelivered
      case "msgSeen": self = .msgSeen
      case "msgSendError": self = .msgSendError
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "MSG_SENDING": self = .msgSending
      case "MSG_SENT": self = .msgSent
      case "MSG_DELIVERED": self = .msgDelivered
      case "MSG_SEEN": self = .msgSeen
      case "MSG_SEND_ERROR": self = .msgSendError
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "MSG_SENDING": self = .msgSending
      case "MSG_SENT": self = .msgSent
      case "MSG_DELIVERED": self = .msgDelivered
      case "MSG_SEEN": self = .msgSeen
      case "MSG_SEND_ERROR": self = .msgSendError
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .msgSending: return 0
        case .msgSent: return 1
        case .msgDelivered: return 2
        case .msgSeen: return 3
        case .msgSendError: return 4
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .msgSending: return "\"MSG_SENDING\""
        case .msgSent: return "\"MSG_SENT\""
        case .msgDelivered: return "\"MSG_DELIVERED\""
        case .msgSeen: return "\"MSG_SEEN\""
        case .msgSendError: return "\"MSG_SEND_ERROR\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .msgSending: return ".msgSending"
        case .msgSent: return ".msgSent"
        case .msgDelivered: return ".msgDelivered"
        case .msgSeen: return ".msgSeen"
        case .msgSendError: return ".msgSendError"
        }
      }
    }

  }

  public var messageId: Data {
    get {return _storage._messageId}
    set {_uniqueStorage()._messageId = newValue}
  }

  public var chatId: Data {
    get {return _storage._chatId}
    set {_uniqueStorage()._chatId = newValue}
  }

  public var sender: Comm_Member {
    get {return _storage._sender ?? Comm_Member()}
    set {_uniqueStorage()._sender = newValue}
  }

  public var time: UInt64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  public var type: UInt32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var smsout: UInt32 {
    get {return _storage._smsout}
    set {_uniqueStorage()._smsout = newValue}
  }

  public var state: UInt32 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  public var data: Data {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var refMsg: Data? {
    get {return _storage._refMsg}
    set {_uniqueStorage()._refMsg = newValue}
  }

  public var status: UInt32? {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  ///   norm: not set, set only when using tempphone to send smsout
  public var useTempPhone: Bool? {
    get {return _storage._useTempPhone ?? false}
    set {_uniqueStorage()._useTempPhone = newValue}
  }

  public init() {}

  public init(messageId: Data = Data(),
    chatId: Data = Data(),
    sender: Comm_Member? = nil,
    time: UInt64 = 0,
    type: UInt32 = 0,
    smsout: UInt32 = 0,
    state: UInt32 = 0,
    data: Data = Data(),
    refMsg: Data? = nil,
    status: UInt32? = nil,
    useTempPhone: Bool? = nil)
  {
    let storage = _uniqueStorage()
    storage._messageId = messageId
    storage._chatId = chatId
    storage._sender = sender
    storage._time = time
    storage._type = type
    storage._smsout = smsout
    storage._state = state
    storage._data = data
    storage._refMsg = refMsg
    storage._status = status
    storage._useTempPhone = useTempPhone
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Message) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_TextMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_TextMessage"}
  public var protoMessageName: String {return "TextMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "text": 1,
    "hasEmoticon": 2,
    "hasLink": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "text": 1,
    "has_emoticon": 2,
    "has_link": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var text: String = ""

  public var hasEmoticon: Bool? = nil

  public var hasLink: Bool? = nil

  public init() {}

  public init(text: String = "",
    hasEmoticon: Bool? = nil,
    hasLink: Bool? = nil)
  {
    self.text = text
    self.hasEmoticon = hasEmoticon
    self.hasLink = hasLink
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &text)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &hasEmoticon)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &hasLink)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: text, protoFieldNumber: 1, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
    if let v = hasEmoticon {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 2, protoFieldName: "has_emoticon", jsonFieldName: "hasEmoticon", swiftFieldName: "hasEmoticon")
    }
    if let v = hasLink {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 3, protoFieldName: "has_link", jsonFieldName: "hasLink", swiftFieldName: "hasLink")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_TextMessage) -> Bool {
    if text != other.text {return false}
    if ((hasEmoticon != nil || other.hasEmoticon != nil) && (hasEmoticon == nil || other.hasEmoticon == nil || hasEmoticon! != other.hasEmoticon!)) {return false}
    if ((hasLink != nil || other.hasLink != nil) && (hasLink == nil || other.hasLink == nil || hasLink! != other.hasLink!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_PhotoMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_PhotoMessage"}
  public var protoMessageName: String {return "PhotoMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "size": 1,
    "width": 2,
    "height": 3,
    "url": 4,
    "thumbnail": 5,
    "name": 6,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "size": 1,
    "width": 2,
    "height": 3,
    "url": 4,
    "thumbnail": 5,
    "name": 6,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var size: UInt64 = 0

  public var width: UInt32? = nil

  public var height: UInt32? = nil

  public var url: String? = nil

  public var thumbnail: String? = nil

  public var name: String? = nil

  public init() {}

  public init(size: UInt64 = 0,
    width: UInt32? = nil,
    height: UInt32? = nil,
    url: String? = nil,
    thumbnail: String? = nil,
    name: String? = nil)
  {
    self.size = size
    self.width = width
    self.height = height
    self.url = url
    self.thumbnail = thumbnail
    self.name = name
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &size)
    case 2: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &width)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &height)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &url)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &thumbnail)
    case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: size, protoFieldNumber: 1, protoFieldName: "size", jsonFieldName: "size", swiftFieldName: "size")
    if let v = width {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "width", jsonFieldName: "width", swiftFieldName: "width")
    }
    if let v = height {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 3, protoFieldName: "height", jsonFieldName: "height", swiftFieldName: "height")
    }
    if let v = url {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "url", jsonFieldName: "url", swiftFieldName: "url")
    }
    if let v = thumbnail {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "thumbnail", jsonFieldName: "thumbnail", swiftFieldName: "thumbnail")
    }
    if let v = name {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_PhotoMessage) -> Bool {
    if size != other.size {return false}
    if ((width != nil || other.width != nil) && (width == nil || other.width == nil || width! != other.width!)) {return false}
    if ((height != nil || other.height != nil) && (height == nil || other.height == nil || height! != other.height!)) {return false}
    if ((url != nil || other.url != nil) && (url == nil || other.url == nil || url! != other.url!)) {return false}
    if ((thumbnail != nil || other.thumbnail != nil) && (thumbnail == nil || other.thumbnail == nil || thumbnail! != other.thumbnail!)) {return false}
    if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_FileMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_FileMessage"}
  public var protoMessageName: String {return "FileMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "size": 1,
    "type": 2,
    "url": 3,
    "name": 4,
    "mimeType": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "size": 1,
    "type": 2,
    "url": 3,
    "name": 4,
    "mime_type": 5,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case zip // = 0
    case image // = 1
    case pdf // = 2
    case excel // = 3
    case word // = 4
    case `default` // = 5

    public init() {
      self = .zip
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .zip
      case 1: self = .image
      case 2: self = .pdf
      case 3: self = .excel
      case 4: self = .word
      case 5: self = .`default`
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "zip": self = .zip
      case "image": self = .image
      case "pdf": self = .pdf
      case "excel": self = .excel
      case "word": self = .word
      case "default": self = .`default`
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ZIP": self = .zip
      case "IMAGE": self = .image
      case "PDF": self = .pdf
      case "EXCEL": self = .excel
      case "WORD": self = .word
      case "DEFAULT": self = .`default`
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ZIP": self = .zip
      case "IMAGE": self = .image
      case "PDF": self = .pdf
      case "EXCEL": self = .excel
      case "WORD": self = .word
      case "DEFAULT": self = .`default`
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .zip: return 0
        case .image: return 1
        case .pdf: return 2
        case .excel: return 3
        case .word: return 4
        case .`default`: return 5
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .zip: return "\"ZIP\""
        case .image: return "\"IMAGE\""
        case .pdf: return "\"PDF\""
        case .excel: return "\"EXCEL\""
        case .word: return "\"WORD\""
        case .`default`: return "\"DEFAULT\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .zip: return ".zip"
        case .image: return ".image"
        case .pdf: return ".pdf"
        case .excel: return ".excel"
        case .word: return ".word"
        case .`default`: return ".default"
        }
      }
    }

  }

  public var size: UInt64 = 0

  public var type: UInt32 = 0

  public var url: String? = nil

  public var name: String? = nil

  public var mimeType: String? = nil

  public init() {}

  public init(size: UInt64 = 0,
    type: UInt32 = 0,
    url: String? = nil,
    name: String? = nil,
    mimeType: String? = nil)
  {
    self.size = size
    self.type = type
    self.url = url
    self.name = name
    self.mimeType = mimeType
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &size)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &url)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &mimeType)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: size, protoFieldNumber: 1, protoFieldName: "size", jsonFieldName: "size", swiftFieldName: "size")
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 2, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    if let v = url {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "url", jsonFieldName: "url", swiftFieldName: "url")
    }
    if let v = name {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if let v = mimeType {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "mime_type", jsonFieldName: "mimeType", swiftFieldName: "mimeType")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_FileMessage) -> Bool {
    if size != other.size {return false}
    if type != other.type {return false}
    if ((url != nil || other.url != nil) && (url == nil || other.url == nil || url! != other.url!)) {return false}
    if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
    if ((mimeType != nil || other.mimeType != nil) && (mimeType == nil || other.mimeType == nil || mimeType! != other.mimeType!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_StickerMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_StickerMessage"}
  public var protoMessageName: String {return "StickerMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "uri": 1,
    "animation": 2,
    "url": 3,
    "packageId": 4,
    "frameSize": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "uri": 1,
    "animation": 2,
    "url": 3,
    "package_id": 4,
    "frame_size": 5,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var uri: String = ""

  public var animation: Bool = false

  public var url: String? = nil

  public var packageId: UInt32 = 0

  public var frameSize: UInt32? = nil

  public init() {}

  public init(uri: String = "",
    animation: Bool = false,
    url: String? = nil,
    packageId: UInt32 = 0,
    frameSize: UInt32? = nil)
  {
    self.uri = uri
    self.animation = animation
    self.url = url
    self.packageId = packageId
    self.frameSize = frameSize
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &uri)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &animation)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &url)
    case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &packageId)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &frameSize)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: uri, protoFieldNumber: 1, protoFieldName: "uri", jsonFieldName: "uri", swiftFieldName: "uri")
    try visitor.visitSingularField(fieldType: ProtobufBool.self, value: animation, protoFieldNumber: 2, protoFieldName: "animation", jsonFieldName: "animation", swiftFieldName: "animation")
    if let v = url {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "url", jsonFieldName: "url", swiftFieldName: "url")
    }
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: packageId, protoFieldNumber: 4, protoFieldName: "package_id", jsonFieldName: "packageId", swiftFieldName: "packageId")
    if let v = frameSize {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "frame_size", jsonFieldName: "frameSize", swiftFieldName: "frameSize")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_StickerMessage) -> Bool {
    if uri != other.uri {return false}
    if animation != other.animation {return false}
    if ((url != nil || other.url != nil) && (url == nil || other.url == nil || url! != other.url!)) {return false}
    if packageId != other.packageId {return false}
    if ((frameSize != nil || other.frameSize != nil) && (frameSize == nil || other.frameSize == nil || frameSize! != other.frameSize!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_VoiceMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_VoiceMessage"}
  public var protoMessageName: String {return "VoiceMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "size": 1,
    "duration": 2,
    "url": 3,
    "name": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "size": 1,
    "duration": 2,
    "url": 3,
    "name": 4,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var size: UInt64 = 0

  public var duration: UInt32 = 0

  public var url: String? = nil

  public var name: String? = nil

  public init() {}

  public init(size: UInt64 = 0,
    duration: UInt32 = 0,
    url: String? = nil,
    name: String? = nil)
  {
    self.size = size
    self.duration = duration
    self.url = url
    self.name = name
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &size)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &duration)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &url)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &name)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: size, protoFieldNumber: 1, protoFieldName: "size", jsonFieldName: "size", swiftFieldName: "size")
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: duration, protoFieldNumber: 2, protoFieldName: "duration", jsonFieldName: "duration", swiftFieldName: "duration")
    if let v = url {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "url", jsonFieldName: "url", swiftFieldName: "url")
    }
    if let v = name {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_VoiceMessage) -> Bool {
    if size != other.size {return false}
    if duration != other.duration {return false}
    if ((url != nil || other.url != nil) && (url == nil || other.url == nil || url! != other.url!)) {return false}
    if ((name != nil || other.name != nil) && (name == nil || other.name == nil || name! != other.name!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_LocationMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_LocationMessage"}
  public var protoMessageName: String {return "LocationMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "lon": 1,
    "lat": 2,
    "placeId": 3,
    "place": 4,
    "title": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "lon": 1,
    "lat": 2,
    "place_id": 3,
    "place": 4,
    "title": 5,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var lon: Double = 0

  public var lat: Double = 0

  public var placeId: String? = nil

  public var place: String? = nil

  public var title: String? = nil

  public init() {}

  public init(lon: Double = 0,
    lat: Double = 0,
    placeId: String? = nil,
    place: String? = nil,
    title: String? = nil)
  {
    self.lon = lon
    self.lat = lat
    self.placeId = placeId
    self.place = place
    self.title = title
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufDouble.self, value: &lon)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufDouble.self, value: &lat)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &placeId)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &place)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &title)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: lon, protoFieldNumber: 1, protoFieldName: "lon", jsonFieldName: "lon", swiftFieldName: "lon")
    try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: lat, protoFieldNumber: 2, protoFieldName: "lat", jsonFieldName: "lat", swiftFieldName: "lat")
    if let v = placeId {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "place_id", jsonFieldName: "placeId", swiftFieldName: "placeId")
    }
    if let v = place {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "place", jsonFieldName: "place", swiftFieldName: "place")
    }
    if let v = title {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "title", jsonFieldName: "title", swiftFieldName: "title")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_LocationMessage) -> Bool {
    if lon != other.lon {return false}
    if lat != other.lat {return false}
    if ((placeId != nil || other.placeId != nil) && (placeId == nil || other.placeId == nil || placeId! != other.placeId!)) {return false}
    if ((place != nil || other.place != nil) && (place == nil || other.place == nil || place! != other.place!)) {return false}
    if ((title != nil || other.title != nil) && (title == nil || other.title == nil || title! != other.title!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_ContactMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_ContactMessage"}
  public var protoMessageName: String {return "ContactMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "contacts": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "contacts": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public struct BusinessContact: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Comm_ContactMessage.BusinessContact"}
    public var protoMessageName: String {return "BusinessContact"}
    public var protoPackageName: String {return "comm"}
    public var jsonFieldNames: [String: Int] {return [
      "name": 1,
      "tel": 2,
      "avatar": 3,
      "viettalkUser": 4,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "name": 1,
      "tel": 2,
      "avatar": 3,
      "viettalk_user": 4,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var name: String = ""

    public var tel: String = ""

    public var avatar: String? = nil

    public var viettalkUser: Bool = false

    public init() {}

    public init(name: String = "",
      tel: String = "",
      avatar: String? = nil,
      viettalkUser: Bool = false)
    {
      self.name = name
      self.tel = tel
      self.avatar = avatar
      self.viettalkUser = viettalkUser
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &name)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &tel)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &avatar)
      case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &viettalkUser)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: tel, protoFieldNumber: 2, protoFieldName: "tel", jsonFieldName: "tel", swiftFieldName: "tel")
      if let v = avatar {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "avatar", jsonFieldName: "avatar", swiftFieldName: "avatar")
      }
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: viettalkUser, protoFieldNumber: 4, protoFieldName: "viettalk_user", jsonFieldName: "viettalkUser", swiftFieldName: "viettalkUser")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Comm_ContactMessage.BusinessContact) -> Bool {
      if name != other.name {return false}
      if tel != other.tel {return false}
      if ((avatar != nil || other.avatar != nil) && (avatar == nil || other.avatar == nil || avatar! != other.avatar!)) {return false}
      if viettalkUser != other.viettalkUser {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var contacts: [Comm_ContactMessage.BusinessContact] = []

  public init() {}

  public init(contacts: [Comm_ContactMessage.BusinessContact] = [])
  {
    if !contacts.isEmpty {
      self.contacts = contacts
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_ContactMessage.BusinessContact.self, value: &contacts)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: contacts, protoFieldNumber: 1, protoFieldName: "contacts", jsonFieldName: "contacts", swiftFieldName: "contacts")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_ContactMessage) -> Bool {
    if contacts != other.contacts {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Post: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Post"}
  public var protoMessageName: String {return "Post"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "postId": 1,
    "sender": 2,
    "type": 3,
    "time": 4,
    "state": 5,
    "likeCount": 6,
    "commentCount": 7,
    "text": 8,
    "images": 9,
    "place": 10,
    "lastComment": 11,
    "liked": 12,
    "privacy": 13,
    "fakeId": 14,
    "sharePostId": 15,
    "shareText": 16,
    "userShare": 17,
    "follow": 18,
    "shareCount": 19,
    "lon": 20,
    "lat": 21,
    "shareTime": 22,
    "sharePrivacy": 23,
    "clientId": 24,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "post_id": 1,
    "sender": 2,
    "type": 3,
    "time": 4,
    "state": 5,
    "like_count": 6,
    "comment_count": 7,
    "text": 8,
    "images": 9,
    "place": 10,
    "last_comment": 11,
    "liked": 12,
    "privacy": 13,
    "fake_id": 14,
    "share_post_id": 15,
    "share_text": 16,
    "user_share": 17,
    "follow": 18,
    "share_count": 19,
    "lon": 20,
    "lat": 21,
    "share_time": 22,
    "share_privacy": 23,
    "client_id": 24,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_Post
    var unknown = ProtobufUnknownStorage()
    var _postId: Data = Data()
    var _sender: Comm_Member? = nil
    var _type: UInt32 = 0
    var _time: UInt64 = 0
    var _state: UInt32 = 0
    var _likeCount: UInt32? = nil
    var _commentCount: UInt32? = nil
    var _text: String? = nil
    var _images: [Comm_Image] = []
    var _place: String? = nil
    var _lastComment: Comm_Comment? = nil
    var _liked: Bool? = nil
    var _privacy: UInt32? = nil
    var _fakeId: Data? = nil
    var _sharePostId: Data? = nil
    var _shareText: String? = nil
    var _userShare: Comm_Member? = nil
    var _follow: Bool? = nil
    var _shareCount: UInt32? = nil
    var _lon: Double? = nil
    var _lat: Double? = nil
    var _shareTime: UInt64? = nil
    var _sharePrivacy: UInt32? = nil
    var _clientId: UInt64? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_postId)
      case 2: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Member.self, value: &_sender)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_type)
      case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_time)
      case 5: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_state)
      case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_likeCount)
      case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_commentCount)
      case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_text)
      case 9: handled = try setter.decodeRepeatedMessageField(fieldType: Comm_Image.self, value: &_images)
      case 10: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_place)
      case 11: handled = try setter.decodeOptionalMessageField(fieldType: Comm_Comment.self, value: &_lastComment)
      case 12: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_liked)
      case 13: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_privacy)
      case 14: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_fakeId)
      case 15: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_sharePostId)
      case 16: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_shareText)
      case 17: handled = try setter.decodeOptionalMessageField(fieldType: Comm_Member.self, value: &_userShare)
      case 18: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_follow)
      case 19: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_shareCount)
      case 20: handled = try setter.decodeOptionalField(fieldType: ProtobufDouble.self, value: &_lon)
      case 21: handled = try setter.decodeOptionalField(fieldType: ProtobufDouble.self, value: &_lat)
      case 22: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &_shareTime)
      case 23: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &_sharePrivacy)
      case 24: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &_clientId)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _postId, protoFieldNumber: 1, protoFieldName: "post_id", jsonFieldName: "postId", swiftFieldName: "postId")
      if let v = _sender {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "sender", jsonFieldName: "sender", swiftFieldName: "sender")
      }
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _type, protoFieldNumber: 3, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _time, protoFieldNumber: 4, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _state, protoFieldNumber: 5, protoFieldName: "state", jsonFieldName: "state", swiftFieldName: "state")
      if let v = _likeCount {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 6, protoFieldName: "like_count", jsonFieldName: "likeCount", swiftFieldName: "likeCount")
      }
      if let v = _commentCount {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 7, protoFieldName: "comment_count", jsonFieldName: "commentCount", swiftFieldName: "commentCount")
      }
      if let v = _text {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 8, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
      }
      if !_images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _images, protoFieldNumber: 9, protoFieldName: "images", jsonFieldName: "images", swiftFieldName: "images")
      }
      if let v = _place {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 10, protoFieldName: "place", jsonFieldName: "place", swiftFieldName: "place")
      }
      if let v = _lastComment {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11, protoFieldName: "last_comment", jsonFieldName: "lastComment", swiftFieldName: "lastComment")
      }
      if let v = _liked {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 12, protoFieldName: "liked", jsonFieldName: "liked", swiftFieldName: "liked")
      }
      if let v = _privacy {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 13, protoFieldName: "privacy", jsonFieldName: "privacy", swiftFieldName: "privacy")
      }
      if let v = _fakeId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 14, protoFieldName: "fake_id", jsonFieldName: "fakeId", swiftFieldName: "fakeId")
      }
      if let v = _sharePostId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 15, protoFieldName: "share_post_id", jsonFieldName: "sharePostId", swiftFieldName: "sharePostId")
      }
      if let v = _shareText {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 16, protoFieldName: "share_text", jsonFieldName: "shareText", swiftFieldName: "shareText")
      }
      if let v = _userShare {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 17, protoFieldName: "user_share", jsonFieldName: "userShare", swiftFieldName: "userShare")
      }
      if let v = _follow {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 18, protoFieldName: "follow", jsonFieldName: "follow", swiftFieldName: "follow")
      }
      if let v = _shareCount {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 19, protoFieldName: "share_count", jsonFieldName: "shareCount", swiftFieldName: "shareCount")
      }
      if let v = _lon {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 20, protoFieldName: "lon", jsonFieldName: "lon", swiftFieldName: "lon")
      }
      if let v = _lat {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 21, protoFieldName: "lat", jsonFieldName: "lat", swiftFieldName: "lat")
      }
      if let v = _shareTime {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 22, protoFieldName: "share_time", jsonFieldName: "shareTime", swiftFieldName: "shareTime")
      }
      if let v = _sharePrivacy {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 23, protoFieldName: "share_privacy", jsonFieldName: "sharePrivacy", swiftFieldName: "sharePrivacy")
      }
      if let v = _clientId {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 24, protoFieldName: "client_id", jsonFieldName: "clientId", swiftFieldName: "clientId")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _postId != other._postId {return false}
      if _sender != other._sender {return false}
      if _type != other._type {return false}
      if _time != other._time {return false}
      if _state != other._state {return false}
      if ((_likeCount != nil || other._likeCount != nil) && (_likeCount == nil || other._likeCount == nil || _likeCount! != other._likeCount!)) {return false}
      if ((_commentCount != nil || other._commentCount != nil) && (_commentCount == nil || other._commentCount == nil || _commentCount! != other._commentCount!)) {return false}
      if ((_text != nil || other._text != nil) && (_text == nil || other._text == nil || _text! != other._text!)) {return false}
      if _images != other._images {return false}
      if ((_place != nil || other._place != nil) && (_place == nil || other._place == nil || _place! != other._place!)) {return false}
      if ((_lastComment != nil || other._lastComment != nil) && (_lastComment == nil || other._lastComment == nil || _lastComment! != other._lastComment!)) {return false}
      if (((_liked != nil && _liked! != false) || (other._liked != nil && other._liked! != false)) && (_liked == nil || other._liked == nil || _liked! != other._liked!)) {return false}
      if ((_privacy != nil || other._privacy != nil) && (_privacy == nil || other._privacy == nil || _privacy! != other._privacy!)) {return false}
      if ((_fakeId != nil || other._fakeId != nil) && (_fakeId == nil || other._fakeId == nil || _fakeId! != other._fakeId!)) {return false}
      if ((_sharePostId != nil || other._sharePostId != nil) && (_sharePostId == nil || other._sharePostId == nil || _sharePostId! != other._sharePostId!)) {return false}
      if ((_shareText != nil || other._shareText != nil) && (_shareText == nil || other._shareText == nil || _shareText! != other._shareText!)) {return false}
      if ((_userShare != nil || other._userShare != nil) && (_userShare == nil || other._userShare == nil || _userShare! != other._userShare!)) {return false}
      if (((_follow != nil && _follow! != false) || (other._follow != nil && other._follow! != false)) && (_follow == nil || other._follow == nil || _follow! != other._follow!)) {return false}
      if ((_shareCount != nil || other._shareCount != nil) && (_shareCount == nil || other._shareCount == nil || _shareCount! != other._shareCount!)) {return false}
      if ((_lon != nil || other._lon != nil) && (_lon == nil || other._lon == nil || _lon! != other._lon!)) {return false}
      if ((_lat != nil || other._lat != nil) && (_lat == nil || other._lat == nil || _lat! != other._lat!)) {return false}
      if ((_shareTime != nil || other._shareTime != nil) && (_shareTime == nil || other._shareTime == nil || _shareTime! != other._shareTime!)) {return false}
      if ((_sharePrivacy != nil || other._sharePrivacy != nil) && (_sharePrivacy == nil || other._sharePrivacy == nil || _sharePrivacy! != other._sharePrivacy!)) {return false}
      if ((_clientId != nil || other._clientId != nil) && (_clientId == nil || other._clientId == nil || _clientId! != other._clientId!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._postId = _postId
      clone._sender = _sender
      clone._type = _type
      clone._time = _time
      clone._state = _state
      clone._likeCount = _likeCount
      clone._commentCount = _commentCount
      clone._text = _text
      clone._images = _images
      clone._place = _place
      clone._lastComment = _lastComment
      clone._liked = _liked
      clone._privacy = _privacy
      clone._fakeId = _fakeId
      clone._sharePostId = _sharePostId
      clone._shareText = _shareText
      clone._userShare = _userShare
      clone._follow = _follow
      clone._shareCount = _shareCount
      clone._lon = _lon
      clone._lat = _lat
      clone._shareTime = _shareTime
      clone._sharePrivacy = _sharePrivacy
      clone._clientId = _clientId
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum State: ProtobufEnum {
    public typealias RawValue = Int
    case normal_ // = 0
    case edited // = 1
    case deleted // = 2
    case expire // = 3

    public init() {
      self = .normal_
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal_
      case 1: self = .edited
      case 2: self = .deleted
      case 3: self = .expire
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "normal_": self = .normal_
      case "edited": self = .edited
      case "deleted": self = .deleted
      case "expire": self = .expire
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NORMAL_": self = .normal_
      case "EDITED": self = .edited
      case "DELETED": self = .deleted
      case "EXPIRE": self = .expire
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NORMAL_": self = .normal_
      case "EDITED": self = .edited
      case "DELETED": self = .deleted
      case "EXPIRE": self = .expire
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .normal_: return 0
        case .edited: return 1
        case .deleted: return 2
        case .expire: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .normal_: return "\"NORMAL_\""
        case .edited: return "\"EDITED\""
        case .deleted: return "\"DELETED\""
        case .expire: return "\"EXPIRE\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .normal_: return ".normal_"
        case .edited: return ".edited"
        case .deleted: return ".deleted"
        case .expire: return ".expire"
        }
      }
    }

  }

  public enum Privacy: ProtobufEnum {
    public typealias RawValue = Int
    case `public` // = 0
    case onlyMe // = 1

    public init() {
      self = .`public`
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .`public`
      case 1: self = .onlyMe
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "public": self = .`public`
      case "onlyMe": self = .onlyMe
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "PUBLIC": self = .`public`
      case "ONLY_ME": self = .onlyMe
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "PUBLIC": self = .`public`
      case "ONLY_ME": self = .onlyMe
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .`public`: return 0
        case .onlyMe: return 1
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .`public`: return "\"PUBLIC\""
        case .onlyMe: return "\"ONLY_ME\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .`public`: return ".public"
        case .onlyMe: return ".onlyMe"
        }
      }
    }

  }

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case normal // = 0
    case share // = 1
    case checkIn // = 2

    public init() {
      self = .normal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .share
      case 2: self = .checkIn
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "normal": self = .normal
      case "share": self = .share
      case "checkIn": self = .checkIn
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NORMAL": self = .normal
      case "SHARE": self = .share
      case "CHECK_IN": self = .checkIn
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NORMAL": self = .normal
      case "SHARE": self = .share
      case "CHECK_IN": self = .checkIn
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .normal: return 0
        case .share: return 1
        case .checkIn: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .normal: return "\"NORMAL\""
        case .share: return "\"SHARE\""
        case .checkIn: return "\"CHECK_IN\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .normal: return ".normal"
        case .share: return ".share"
        case .checkIn: return ".checkIn"
        }
      }
    }

  }

  public var postId: Data {
    get {return _storage._postId}
    set {_uniqueStorage()._postId = newValue}
  }

  public var sender: Comm_Member {
    get {return _storage._sender ?? Comm_Member()}
    set {_uniqueStorage()._sender = newValue}
  }

  ///   normal or share
  public var type: UInt32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var time: UInt64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  public var state: UInt32 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  public var likeCount: UInt32? {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  public var commentCount: UInt32? {
    get {return _storage._commentCount}
    set {_uniqueStorage()._commentCount = newValue}
  }

  public var text: String? {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  public var images: [Comm_Image] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var place: String? {
    get {return _storage._place}
    set {_uniqueStorage()._place = newValue}
  }

  public var lastComment: Comm_Comment? {
    get {return _storage._lastComment}
    set {_uniqueStorage()._lastComment = newValue}
  }

  public var liked: Bool? {
    get {return _storage._liked ?? false}
    set {_uniqueStorage()._liked = newValue}
  }

  public var privacy: UInt32? {
    get {return _storage._privacy}
    set {_uniqueStorage()._privacy = newValue}
  }

  public var fakeId: Data? {
    get {return _storage._fakeId}
    set {_uniqueStorage()._fakeId = newValue}
  }

  public var sharePostId: Data? {
    get {return _storage._sharePostId}
    set {_uniqueStorage()._sharePostId = newValue}
  }

  public var shareText: String? {
    get {return _storage._shareText}
    set {_uniqueStorage()._shareText = newValue}
  }

  public var userShare: Comm_Member? {
    get {return _storage._userShare}
    set {_uniqueStorage()._userShare = newValue}
  }

  public var follow: Bool? {
    get {return _storage._follow ?? false}
    set {_uniqueStorage()._follow = newValue}
  }

  public var shareCount: UInt32? {
    get {return _storage._shareCount}
    set {_uniqueStorage()._shareCount = newValue}
  }

  public var lon: Double? {
    get {return _storage._lon}
    set {_uniqueStorage()._lon = newValue}
  }

  public var lat: Double? {
    get {return _storage._lat}
    set {_uniqueStorage()._lat = newValue}
  }

  public var shareTime: UInt64? {
    get {return _storage._shareTime}
    set {_uniqueStorage()._shareTime = newValue}
  }

  public var sharePrivacy: UInt32? {
    get {return _storage._sharePrivacy}
    set {_uniqueStorage()._sharePrivacy = newValue}
  }

  ///   for ios
  public var clientId: UInt64? {
    get {return _storage._clientId}
    set {_uniqueStorage()._clientId = newValue}
  }

  public init() {}

  public init(postId: Data = Data(),
    sender: Comm_Member? = nil,
    type: UInt32 = 0,
    time: UInt64 = 0,
    state: UInt32 = 0,
    likeCount: UInt32? = nil,
    commentCount: UInt32? = nil,
    text: String? = nil,
    images: [Comm_Image] = [],
    place: String? = nil,
    lastComment: Comm_Comment? = nil,
    liked: Bool? = nil,
    privacy: UInt32? = nil,
    fakeId: Data? = nil,
    sharePostId: Data? = nil,
    shareText: String? = nil,
    userShare: Comm_Member? = nil,
    follow: Bool? = nil,
    shareCount: UInt32? = nil,
    lon: Double? = nil,
    lat: Double? = nil,
    shareTime: UInt64? = nil,
    sharePrivacy: UInt32? = nil,
    clientId: UInt64? = nil)
  {
    let storage = _uniqueStorage()
    storage._postId = postId
    storage._sender = sender
    storage._type = type
    storage._time = time
    storage._state = state
    storage._likeCount = likeCount
    storage._commentCount = commentCount
    storage._text = text
    if !images.isEmpty {
      storage._images = images
    }
    storage._place = place
    storage._lastComment = lastComment
    storage._liked = liked
    storage._privacy = privacy
    storage._fakeId = fakeId
    storage._sharePostId = sharePostId
    storage._shareText = shareText
    storage._userShare = userShare
    storage._follow = follow
    storage._shareCount = shareCount
    storage._lon = lon
    storage._lat = lat
    storage._shareTime = shareTime
    storage._sharePrivacy = sharePrivacy
    storage._clientId = clientId
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Post) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_CallMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_CallMessage"}
  public var protoMessageName: String {return "CallMessage"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "callerId": 1,
    "calleeId": 2,
    "type": 3,
    "duration": 5,
    "tempPhone": 6,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "caller_id": 1,
    "callee_id": 2,
    "type": 3,
    "duration": 5,
    "temp_phone": 6,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case a2A // = 0
    case a2P // = 1
    case p2A // = 2
    case group // = 3

    public init() {
      self = .a2A
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a2A
      case 1: self = .a2P
      case 2: self = .p2A
      case 3: self = .group
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "a2A": self = .a2A
      case "a2P": self = .a2P
      case "p2A": self = .p2A
      case "group": self = .group
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "A2A": self = .a2A
      case "A2P": self = .a2P
      case "P2A": self = .p2A
      case "GROUP": self = .group
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "A2A": self = .a2A
      case "A2P": self = .a2P
      case "P2A": self = .p2A
      case "GROUP": self = .group
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a2A: return 0
        case .a2P: return 1
        case .p2A: return 2
        case .group: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a2A: return "\"A2A\""
        case .a2P: return "\"A2P\""
        case .p2A: return "\"P2A\""
        case .group: return "\"GROUP\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a2A: return ".a2A"
        case .a2P: return ".a2P"
        case .p2A: return ".p2A"
        case .group: return ".group"
        }
      }
    }

  }

  public var callerId: Data = Data()

  public var calleeId: Data = Data()

  public var type: UInt32 = 0

  public var duration: UInt64? = nil

  public var tempPhone: String? = nil

  public init() {}

  public init(callerId: Data = Data(),
    calleeId: Data = Data(),
    type: UInt32 = 0,
    duration: UInt64? = nil,
    tempPhone: String? = nil)
  {
    self.callerId = callerId
    self.calleeId = calleeId
    self.type = type
    self.duration = duration
    self.tempPhone = tempPhone
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &callerId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &calleeId)
    case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &type)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt64.self, value: &duration)
    case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &tempPhone)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: callerId, protoFieldNumber: 1, protoFieldName: "caller_id", jsonFieldName: "callerId", swiftFieldName: "callerId")
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: calleeId, protoFieldNumber: 2, protoFieldName: "callee_id", jsonFieldName: "calleeId", swiftFieldName: "calleeId")
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: type, protoFieldNumber: 3, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    if let v = duration {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 5, protoFieldName: "duration", jsonFieldName: "duration", swiftFieldName: "duration")
    }
    if let v = tempPhone {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "temp_phone", jsonFieldName: "tempPhone", swiftFieldName: "tempPhone")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_CallMessage) -> Bool {
    if callerId != other.callerId {return false}
    if calleeId != other.calleeId {return false}
    if type != other.type {return false}
    if ((duration != nil || other.duration != nil) && (duration == nil || other.duration == nil || duration! != other.duration!)) {return false}
    if ((tempPhone != nil || other.tempPhone != nil) && (tempPhone == nil || other.tempPhone == nil || tempPhone! != other.tempPhone!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Comment: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Comment"}
  public var protoMessageName: String {return "Comment"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "commentId": 1,
    "sender": 2,
    "text": 3,
    "time": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "comment_id": 1,
    "sender": 2,
    "text": 3,
    "time": 4,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_Comment
    var unknown = ProtobufUnknownStorage()
    var _commentId: Data = Data()
    var _sender: Comm_Member? = nil
    var _text: String = ""
    var _time: UInt64 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_commentId)
      case 2: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Member.self, value: &_sender)
      case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_text)
      case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_time)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _commentId, protoFieldNumber: 1, protoFieldName: "comment_id", jsonFieldName: "commentId", swiftFieldName: "commentId")
      if let v = _sender {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "sender", jsonFieldName: "sender", swiftFieldName: "sender")
      }
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _text, protoFieldNumber: 3, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _time, protoFieldNumber: 4, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _commentId != other._commentId {return false}
      if _sender != other._sender {return false}
      if _text != other._text {return false}
      if _time != other._time {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._commentId = _commentId
      clone._sender = _sender
      clone._text = _text
      clone._time = _time
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var commentId: Data {
    get {return _storage._commentId}
    set {_uniqueStorage()._commentId = newValue}
  }

  public var sender: Comm_Member {
    get {return _storage._sender ?? Comm_Member()}
    set {_uniqueStorage()._sender = newValue}
  }

  public var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  public var time: UInt64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  public init() {}

  public init(commentId: Data = Data(),
    sender: Comm_Member? = nil,
    text: String = "",
    time: UInt64 = 0)
  {
    let storage = _uniqueStorage()
    storage._commentId = commentId
    storage._sender = sender
    storage._text = text
    storage._time = time
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Comment) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_Image: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Image"}
  public var protoMessageName: String {return "Image"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "imageId": 1,
    "url": 2,
    "thumbNail": 3,
    "size": 4,
    "width": 5,
    "height": 6,
    "postId": 7,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "image_id": 1,
    "url": 2,
    "thumb_nail": 3,
    "size": 4,
    "width": 5,
    "height": 6,
    "post_id": 7,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var imageId: Data = Data()

  public var url: String = ""

  public var thumbNail: String? = nil

  public var size: UInt32? = nil

  public var width: UInt32? = nil

  public var height: UInt32? = nil

  public var postId: Data? = nil

  public init() {}

  public init(imageId: Data = Data(),
    url: String = "",
    thumbNail: String? = nil,
    size: UInt32? = nil,
    width: UInt32? = nil,
    height: UInt32? = nil,
    postId: Data? = nil)
  {
    self.imageId = imageId
    self.url = url
    self.thumbNail = thumbNail
    self.size = size
    self.width = width
    self.height = height
    self.postId = postId
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &imageId)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &url)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &thumbNail)
    case 4: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &size)
    case 5: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &width)
    case 6: handled = try setter.decodeOptionalField(fieldType: ProtobufUInt32.self, value: &height)
    case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &postId)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: imageId, protoFieldNumber: 1, protoFieldName: "image_id", jsonFieldName: "imageId", swiftFieldName: "imageId")
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: url, protoFieldNumber: 2, protoFieldName: "url", jsonFieldName: "url", swiftFieldName: "url")
    if let v = thumbNail {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "thumb_nail", jsonFieldName: "thumbNail", swiftFieldName: "thumbNail")
    }
    if let v = size {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 4, protoFieldName: "size", jsonFieldName: "size", swiftFieldName: "size")
    }
    if let v = width {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "width", jsonFieldName: "width", swiftFieldName: "width")
    }
    if let v = height {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 6, protoFieldName: "height", jsonFieldName: "height", swiftFieldName: "height")
    }
    if let v = postId {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 7, protoFieldName: "post_id", jsonFieldName: "postId", swiftFieldName: "postId")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Image) -> Bool {
    if imageId != other.imageId {return false}
    if url != other.url {return false}
    if ((thumbNail != nil || other.thumbNail != nil) && (thumbNail == nil || other.thumbNail == nil || thumbNail! != other.thumbNail!)) {return false}
    if ((size != nil || other.size != nil) && (size == nil || other.size == nil || size! != other.size!)) {return false}
    if ((width != nil || other.width != nil) && (width == nil || other.width == nil || width! != other.width!)) {return false}
    if ((height != nil || other.height != nil) && (height == nil || other.height == nil || height! != other.height!)) {return false}
    if ((postId != nil || other.postId != nil) && (postId == nil || other.postId == nil || postId! != other.postId!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_Notification: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Notification"}
  public var protoMessageName: String {return "Notification"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "notificationId": 1,
    "type": 2,
    "source": 3,
    "userId": 4,
    "data": 5,
    "time": 6,
    "unseen": 7,
    "refId": 8,
    "keyNotification": 9,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "notification_id": 1,
    "type": 2,
    "source": 3,
    "user_id": 4,
    "data": 5,
    "time": 6,
    "unseen": 7,
    "ref_id": 8,
    "key_notification": 9,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_Notification
    var unknown = ProtobufUnknownStorage()
    var _notificationId: Data = Data()
    var _type: UInt32 = 0
    var _source: Comm_Member? = nil
    var _userId: Data = Data()
    var _data: String = ""
    var _time: UInt64 = 0
    var _unseen: Bool? = nil
    var _refId: Data? = nil
    var _keyNotification: Data? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_notificationId)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_type)
      case 3: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Member.self, value: &_source)
      case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufBytes.self, value: &_userId)
      case 5: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_data)
      case 6: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_time)
      case 7: handled = try setter.decodeOptionalField(fieldType: ProtobufBool.self, value: &_unseen)
      case 8: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_refId)
      case 9: handled = try setter.decodeOptionalField(fieldType: ProtobufBytes.self, value: &_keyNotification)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _notificationId, protoFieldNumber: 1, protoFieldName: "notification_id", jsonFieldName: "notificationId", swiftFieldName: "notificationId")
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _type, protoFieldNumber: 2, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      if let v = _source {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "source", jsonFieldName: "source", swiftFieldName: "source")
      }
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _userId, protoFieldNumber: 4, protoFieldName: "user_id", jsonFieldName: "userId", swiftFieldName: "userId")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _data, protoFieldNumber: 5, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _time, protoFieldNumber: 6, protoFieldName: "time", jsonFieldName: "time", swiftFieldName: "time")
      if let v = _unseen {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 7, protoFieldName: "unseen", jsonFieldName: "unseen", swiftFieldName: "unseen")
      }
      if let v = _refId {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 8, protoFieldName: "ref_id", jsonFieldName: "refId", swiftFieldName: "refId")
      }
      if let v = _keyNotification {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 9, protoFieldName: "key_notification", jsonFieldName: "keyNotification", swiftFieldName: "keyNotification")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _notificationId != other._notificationId {return false}
      if _type != other._type {return false}
      if _source != other._source {return false}
      if _userId != other._userId {return false}
      if _data != other._data {return false}
      if _time != other._time {return false}
      if ((_unseen != nil || other._unseen != nil) && (_unseen == nil || other._unseen == nil || _unseen! != other._unseen!)) {return false}
      if ((_refId != nil || other._refId != nil) && (_refId == nil || other._refId == nil || _refId! != other._refId!)) {return false}
      if ((_keyNotification != nil || other._keyNotification != nil) && (_keyNotification == nil || other._keyNotification == nil || _keyNotification! != other._keyNotification!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._notificationId = _notificationId
      clone._type = _type
      clone._source = _source
      clone._userId = _userId
      clone._data = _data
      clone._time = _time
      clone._unseen = _unseen
      clone._refId = _refId
      clone._keyNotification = _keyNotification
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case like // = 0
    case comment // = 1
    case follow // = 2
    case sayHello // = 3

    public init() {
      self = .like
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .like
      case 1: self = .comment
      case 2: self = .follow
      case 3: self = .sayHello
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "like": self = .like
      case "comment": self = .comment
      case "follow": self = .follow
      case "sayHello": self = .sayHello
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "LIKE": self = .like
      case "COMMENT": self = .comment
      case "FOLLOW": self = .follow
      case "SAY_HELLO": self = .sayHello
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "LIKE": self = .like
      case "COMMENT": self = .comment
      case "FOLLOW": self = .follow
      case "SAY_HELLO": self = .sayHello
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .like: return 0
        case .comment: return 1
        case .follow: return 2
        case .sayHello: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .like: return "\"LIKE\""
        case .comment: return "\"COMMENT\""
        case .follow: return "\"FOLLOW\""
        case .sayHello: return "\"SAY_HELLO\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .like: return ".like"
        case .comment: return ".comment"
        case .follow: return ".follow"
        case .sayHello: return ".sayHello"
        }
      }
    }

  }

  public var notificationId: Data {
    get {return _storage._notificationId}
    set {_uniqueStorage()._notificationId = newValue}
  }

  public var type: UInt32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var source: Comm_Member {
    get {return _storage._source ?? Comm_Member()}
    set {_uniqueStorage()._source = newValue}
  }

  public var userId: Data {
    get {return _storage._userId}
    set {_uniqueStorage()._userId = newValue}
  }

  public var data: String {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var time: UInt64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  public var unseen: Bool? {
    get {return _storage._unseen}
    set {_uniqueStorage()._unseen = newValue}
  }

  ///   COMMENT, LIKE --> ref_id is post_id, || SAY_HELLO, FOLLOW --> ref_id is contact_id
  public var refId: Data? {
    get {return _storage._refId}
    set {_uniqueStorage()._refId = newValue}
  }

  public var keyNotification: Data? {
    get {return _storage._keyNotification}
    set {_uniqueStorage()._keyNotification = newValue}
  }

  public init() {}

  public init(notificationId: Data = Data(),
    type: UInt32 = 0,
    source: Comm_Member? = nil,
    userId: Data = Data(),
    data: String = "",
    time: UInt64 = 0,
    unseen: Bool? = nil,
    refId: Data? = nil,
    keyNotification: Data? = nil)
  {
    let storage = _uniqueStorage()
    storage._notificationId = notificationId
    storage._type = type
    storage._source = source
    storage._userId = userId
    storage._data = data
    storage._time = time
    storage._unseen = unseen
    storage._refId = refId
    storage._keyNotification = keyNotification
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Notification) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   model for my number
public struct Comm_Tariff: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_Tariff"}
  public var protoMessageName: String {return "Tariff"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
    "price": 2,
    "duration": 3,
    "description": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
    "price": 2,
    "duration": 3,
    "description": 4,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var id: UInt32 = 0

  public var price: UInt32 = 0

  public var duration: UInt32 = 0

  public var description_p: String = ""

  public init() {}

  public init(id: UInt32 = 0,
    price: UInt32 = 0,
    duration: UInt32 = 0,
    description_p: String = "")
  {
    self.id = id
    self.price = price
    self.duration = duration
    self.description_p = description_p
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &id)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &price)
    case 3: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &duration)
    case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &description_p)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: price, protoFieldNumber: 2, protoFieldName: "price", jsonFieldName: "price", swiftFieldName: "price")
    try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: duration, protoFieldNumber: 3, protoFieldName: "duration", jsonFieldName: "duration", swiftFieldName: "duration")
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: description_p, protoFieldNumber: 4, protoFieldName: "description", jsonFieldName: "description", swiftFieldName: "description_p")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_Tariff) -> Bool {
    if id != other.id {return false}
    if price != other.price {return false}
    if duration != other.duration {return false}
    if description_p != other.description_p {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Comm_NumberStore: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_NumberStore"}
  public var protoMessageName: String {return "NumberStore"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "number": 1,
    "tariff": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "number": 1,
    "tariff": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_NumberStore
    var unknown = ProtobufUnknownStorage()
    var _number: String = ""
    var _tariff: Comm_Tariff? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_number)
      case 2: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Tariff.self, value: &_tariff)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _number, protoFieldNumber: 1, protoFieldName: "number", jsonFieldName: "number", swiftFieldName: "number")
      if let v = _tariff {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "tariff", jsonFieldName: "tariff", swiftFieldName: "tariff")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _number != other._number {return false}
      if _tariff != other._tariff {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._number = _number
      clone._tariff = _tariff
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var number: String {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  public var tariff: Comm_Tariff {
    get {return _storage._tariff ?? Comm_Tariff()}
    set {_uniqueStorage()._tariff = newValue}
  }

  public init() {}

  public init(number: String = "",
    tariff: Comm_Tariff? = nil)
  {
    let storage = _uniqueStorage()
    storage._number = number
    storage._tariff = tariff
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_NumberStore) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Comm_MyNumber: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Comm_MyNumber"}
  public var protoMessageName: String {return "MyNumber"}
  public var protoPackageName: String {return "comm"}
  public var jsonFieldNames: [String: Int] {return [
    "phone": 1,
    "number": 2,
    "alias": 3,
    "status": 4,
    "tariff": 5,
    "isDefault": 6,
    "createDate": 7,
    "expireDate": 8,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "phone": 1,
    "number": 2,
    "alias": 3,
    "status": 4,
    "tariff": 5,
    "is_default": 6,
    "create_date": 7,
    "expire_date": 8,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Comm_MyNumber
    var unknown = ProtobufUnknownStorage()
    var _phone: String = ""
    var _number: String = ""
    var _alias: String? = nil
    var _status: UInt32 = 0
    var _tariff: Comm_Tariff? = nil
    var _isDefault: Bool = false
    var _createDate: UInt64 = 0
    var _expireDate: UInt64 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_phone)
      case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &_number)
      case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &_alias)
      case 4: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt32.self, value: &_status)
      case 5: handled = try setter.decodeRequiredMessageField(fieldType: Comm_Tariff.self, value: &_tariff)
      case 6: handled = try setter.decodeRequiredField(fieldType: ProtobufBool.self, value: &_isDefault)
      case 7: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_createDate)
      case 8: handled = try setter.decodeRequiredField(fieldType: ProtobufUInt64.self, value: &_expireDate)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _phone, protoFieldNumber: 1, protoFieldName: "phone", jsonFieldName: "phone", swiftFieldName: "phone")
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: _number, protoFieldNumber: 2, protoFieldName: "number", jsonFieldName: "number", swiftFieldName: "number")
      if let v = _alias {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "alias", jsonFieldName: "alias", swiftFieldName: "alias")
      }
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _status, protoFieldNumber: 4, protoFieldName: "status", jsonFieldName: "status", swiftFieldName: "status")
      if let v = _tariff {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 5, protoFieldName: "tariff", jsonFieldName: "tariff", swiftFieldName: "tariff")
      }
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: _isDefault, protoFieldNumber: 6, protoFieldName: "is_default", jsonFieldName: "isDefault", swiftFieldName: "isDefault")
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _createDate, protoFieldNumber: 7, protoFieldName: "create_date", jsonFieldName: "createDate", swiftFieldName: "createDate")
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _expireDate, protoFieldNumber: 8, protoFieldName: "expire_date", jsonFieldName: "expireDate", swiftFieldName: "expireDate")
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _phone != other._phone {return false}
      if _number != other._number {return false}
      if ((_alias != nil || other._alias != nil) && (_alias == nil || other._alias == nil || _alias! != other._alias!)) {return false}
      if _status != other._status {return false}
      if _tariff != other._tariff {return false}
      if _isDefault != other._isDefault {return false}
      if _createDate != other._createDate {return false}
      if _expireDate != other._expireDate {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._phone = _phone
      clone._number = _number
      clone._alias = _alias
      clone._status = _status
      clone._tariff = _tariff
      clone._isDefault = _isDefault
      clone._createDate = _createDate
      clone._expireDate = _expireDate
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var phone: String {
    get {return _storage._phone}
    set {_uniqueStorage()._phone = newValue}
  }

  public var number: String {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  public var alias: String? {
    get {return _storage._alias}
    set {_uniqueStorage()._alias = newValue}
  }

  public var status: UInt32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var tariff: Comm_Tariff {
    get {return _storage._tariff ?? Comm_Tariff()}
    set {_uniqueStorage()._tariff = newValue}
  }

  public var isDefault: Bool {
    get {return _storage._isDefault}
    set {_uniqueStorage()._isDefault = newValue}
  }

  public var createDate: UInt64 {
    get {return _storage._createDate}
    set {_uniqueStorage()._createDate = newValue}
  }

  public var expireDate: UInt64 {
    get {return _storage._expireDate}
    set {_uniqueStorage()._expireDate = newValue}
  }

  public init() {}

  public init(phone: String = "",
    number: String = "",
    alias: String? = nil,
    status: UInt32 = 0,
    tariff: Comm_Tariff? = nil,
    isDefault: Bool = false,
    createDate: UInt64 = 0,
    expireDate: UInt64 = 0)
  {
    let storage = _uniqueStorage()
    storage._phone = phone
    storage._number = number
    storage._alias = alias
    storage._status = status
    storage._tariff = tariff
    storage._isDefault = isDefault
    storage._createDate = createDate
    storage._expireDate = expireDate
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Comm_MyNumber) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
